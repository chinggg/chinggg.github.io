<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>2020年CTF赛事复盘</title>
    <link href="/2020/11/06/CTF2020/"/>
    <url>/2020/11/06/CTF2020/</url>
    
    <content type="html"><![CDATA[<h2 id="bytectf2020"><a class="markdownIt-Anchor" href="#bytectf2020"></a> ByteCTF2020</h2><h3 id="misc"><a class="markdownIt-Anchor" href="#misc"></a> Misc</h3><h4 id="hardcore-watermark-01"><a class="markdownIt-Anchor" href="#hardcore-watermark-01"></a> Hardcore Watermark 01</h4><blockquote><p>厌烦了用工具解图片题？那么来点硬核的～</p><p>链接: <a href="https://pan.baidu.com/s/1lKNYV4_X2Aqx8-qPB2Z_uw">https://pan.baidu.com/s/1lKNYV4_X2Aqx8-qPB2Z_uw</a> 密码: 6597<br />（备用下载：<a href="https://drive.google.com/drive/folders/1MsAZfHq2G61AQQCv_CBajmjnPUXlIBIo?usp=sharing%EF%BC%89">https://drive.google.com/drive/folders/1MsAZfHq2G61AQQCv_CBajmjnPUXlIBIo?usp=sharing）</a></p></blockquote><p>方法1：</p><p>官方解题思路：将图片从RGB通道转为YCrCb通道（虽然题目没有给出任何提示，但可能是图片隐写题常规操作）</p><p>调用opencv库，通过 <code>cv2.cvtColor(img, cv2.COLOR_BGR2YCrCb)</code>，对 img 图片数据进行色彩空间转换，得到三个通道对应的图片，呈现出的效果是三张灰色的图片，此处就不贴了，到此仍然没有任何曙光出现。</p><p>然后官方解法让我们对三个通道中的数据根据奇偶做二值化处理，二值化后的数据分别代表二维码的黑和白，并且每个通道可得到部分二维码图片。最后只需将三个通道数据结合到一幅图中即可复现二维码。</p><p><img src="/img/ByteCTF2020/wm01_0.png" alt="Flag0" /><br /><img src="/img/ByteCTF2020/wm01_1.png" alt="Flag1" /><br /><img src="/img/ByteCTF2020/wm01_2.png" alt="Flag2" /></p><p>官方题解只给出了二值化处理的一行核心代码<code>dst_value = (src_value % 2) * 255</code>，我在查阅opencv相关资料后，具体实现的处理图片完整的代码如下：</p><pre><code class="hljs python"><span class="hljs-keyword">import</span> cv2img_raw=cv2.imread(<span class="hljs-string">&quot;ByteRaw.png&quot;</span>)img=cv2.cvtColor(img_raw, cv2.COLOR_BGR2YCrCb)<span class="hljs-comment">#img=cv2.resize(img,None,fx=1,fy=1)</span>cv2.imshow(<span class="hljs-string">&quot;img&quot;</span>, img)img0=(img[:,:,<span class="hljs-number">0</span>]%<span class="hljs-number">2</span>)*<span class="hljs-number">255</span>img1=(img[:,:,<span class="hljs-number">1</span>]%<span class="hljs-number">2</span>)*<span class="hljs-number">255</span>img2=(img[:,:,<span class="hljs-number">2</span>]%<span class="hljs-number">2</span>)*<span class="hljs-number">255</span><span class="hljs-comment">#以下三行尝试手动切割出1/3的有效二维码长度，但结果不如直接用位图编辑器裁切</span><span class="hljs-comment">#img0=img0[0:int(img0.shape[0]/3)]</span><span class="hljs-comment">#img1=img1[0:int(img1.shape[0]/3)]</span><span class="hljs-comment">#img2=img2[0:int(img2.shape[0]/3)]</span>cv2.imshow(<span class="hljs-string">&quot;img0&quot;</span>,img0)cv2.imshow(<span class="hljs-string">&quot;img1&quot;</span>,img1)cv2.imshow(<span class="hljs-string">&quot;img2&quot;</span>,img2)cv2.imwrite(<span class="hljs-string">&quot;ByteFlag0.png&quot;</span>,img0)cv2.imwrite(<span class="hljs-string">&quot;ByteFlag1.png&quot;</span>,img1)cv2.imwrite(<span class="hljs-string">&quot;ByteFlag2.png&quot;</span>,img2)cv2.waitKey()</code></pre><p>执行代码后得到三张图片，分别可裁切出二维码的上中下三部分，即得完整的二维码</p><p><img src="/img/ByteCTF2020/wm01_flag.png" alt="Flag" /></p><p>方法2(非预期解)：先搜到<a href="http://image.tech.china.cn//upload/images/2020/0622/141832/209_367168_60428c03ed5c75e0d6185b1bb55a7ff3.png">原图</a></p><p>使用 stegsolve 里的 image combiner 进行 sub 运算，再反色得到：</p><p><img src="https://md.byr.moe/uploads/upload_d64c50093170764e146f5f9dda54e79f.png" alt="sub后" /></p><p>猜测是某一个色域的像素值确定一个二维码，然后再用脚本提取RGB色域再经PS操作同样可得完整二维码</p><h3 id="re"><a class="markdownIt-Anchor" href="#re"></a> RE</h3><h4 id="crackme"><a class="markdownIt-Anchor" href="#crackme"></a> CrackMe</h4><blockquote><p>“This is a Ciphertext of the flag:”“2d186a3e172a14673789f499cd6cfbcd29b6c73f4b4a27c23464776825af90b2&quot;”. You can decrypt it directly or input a password to get the flag.&quot;<br />hint1: Is it a real SHA256?</p></blockquote><p>直接GDA打开apk，翻阅java代码可以得知解密算法是aes cbc。</p><p>so文件拉到IDA，查看关键函数checkPass</p><pre><code class="hljs c"><span class="hljs-function">jstring __fastcall <span class="hljs-title">Java_com_bytedance_ctf_ndk_JniUtils_checkPass</span><span class="hljs-params">(JNIEnv *a1, <span class="hljs-keyword">int</span> a2, <span class="hljs-keyword">int</span> a3)</span></span><span class="hljs-function"></span>&#123;  <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *v5; <span class="hljs-comment">// r0</span>  <span class="hljs-keyword">size_t</span> v6; <span class="hljs-comment">// r5</span>  <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *v7; <span class="hljs-comment">// r0</span>  _DWORD v9[<span class="hljs-number">20</span>]; <span class="hljs-comment">// [sp+0h] [bp-90h] BYREF</span>  __int64 v10; <span class="hljs-comment">// [sp+50h] [bp-40h]</span>  __int64 v11; <span class="hljs-comment">// [sp+58h] [bp-38h]</span>  __int64 v12; <span class="hljs-comment">// [sp+60h] [bp-30h]</span>  __int64 v13; <span class="hljs-comment">// [sp+68h] [bp-28h]</span>  v5 = (*a1)-&gt;GetStringUTFChars(a1, a3, <span class="hljs-number">0</span>);  v6 = <span class="hljs-built_in">strlen</span>(v5);  v7 = (*a1)-&gt;GetStringUTFChars(a1, a3, <span class="hljs-number">0</span>);  <span class="hljs-keyword">if</span> ( v6 &gt;= <span class="hljs-number">0x40</span> )    v6 = <span class="hljs-number">64</span>;  <span class="hljs-built_in">strncpy</span>(str_password, v7, v6);  v12 = *(_QWORD *)sub_1430;  v13 = loc_1438;  v10 = loc_1440;  v11 = <span class="hljs-number">0xA54FF53A3C6EF372</span>LL;  v9[<span class="hljs-number">18</span>] = <span class="hljs-number">0</span>;  v9[<span class="hljs-number">19</span>] = <span class="hljs-number">0</span>;  v9[<span class="hljs-number">16</span>] = <span class="hljs-number">0</span>;  j_sha256_update(v9, str_password, v6);  j_sha256_final(v9, sha256);  *(_QWORD *)keyValue = sha256[<span class="hljs-number">0</span>];<span class="hljs-comment">//key=sha256[:16]</span>  unk_500C = unk_502C;  *(_QWORD *)iv = unk_5034;<span class="hljs-comment">//iv=sha256[16:]</span>  unk_501C = unk_503C;  <span class="hljs-keyword">return</span> (*a1)-&gt;NewStringUTF(a1, <span class="hljs-string">&quot;Sorry!&quot;</span>);&#125;</code></pre><p>重点在sha256_final，在输入长度为32位时为非正常sha256，只取前四字节的hash，长度依旧设置为32。</p><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> __fastcall <span class="hljs-title">sha256_final</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a1, <span class="hljs-keyword">int</span> a2)</span></span><span class="hljs-function"></span>&#123;  <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> len_1; <span class="hljs-comment">// r1</span>  <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> len; <span class="hljs-comment">// r0</span>  <span class="hljs-keyword">int</span> v6; <span class="hljs-comment">// r0</span>  <span class="hljs-keyword">int</span> v7; <span class="hljs-comment">// r1</span>  _BYTE *v8; <span class="hljs-comment">// r2</span>  <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> v9; <span class="hljs-comment">// r3</span>  <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> v10; <span class="hljs-comment">// r3</span>  <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> v11; <span class="hljs-comment">// r0</span>  __int64 v12; <span class="hljs-comment">// r0</span>  <span class="hljs-keyword">int</span> v13; <span class="hljs-comment">// r1</span>  _BYTE *v14; <span class="hljs-comment">// r2</span>  <span class="hljs-keyword">int</span> v15; <span class="hljs-comment">// r3</span>  len = *(_DWORD *)(a1 + <span class="hljs-number">64</span>);  len_1 = len;  <span class="hljs-keyword">if</span> ( len == <span class="hljs-number">32</span> )  &#123;    v6 = <span class="hljs-number">0</span>;    v7 = <span class="hljs-number">24</span>;    <span class="hljs-keyword">while</span> ( v6 != <span class="hljs-number">4</span> )    &#123;      *(_BYTE *)(a2 + v6) = *(<span class="hljs-keyword">unsigned</span> __int8 *)(a1 + v6) &gt;&gt; v7;      v8 = (_BYTE *)(a2 + v6);      v8[<span class="hljs-number">4</span>] = *(<span class="hljs-keyword">unsigned</span> __int8 *)(a1 + v6) &gt;&gt; v7;      v8[<span class="hljs-number">8</span>] = *(<span class="hljs-keyword">unsigned</span> __int8 *)(a1 + v6) &gt;&gt; v7;      v8[<span class="hljs-number">12</span>] = *(<span class="hljs-keyword">unsigned</span> __int8 *)(a1 + v6) &gt;&gt; v7;      v8[<span class="hljs-number">16</span>] = *(<span class="hljs-keyword">unsigned</span> __int8 *)(a1 + v6) &gt;&gt; v7;      v8[<span class="hljs-number">20</span>] = *(<span class="hljs-keyword">unsigned</span> __int8 *)(a1 + v6) &gt;&gt; v7;      v8[<span class="hljs-number">24</span>] = *(<span class="hljs-keyword">unsigned</span> __int8 *)(a1 + v6) &gt;&gt; v7;      v9 = *(<span class="hljs-keyword">unsigned</span> __int8 *)(a1 + v6++);      v10 = v9 &gt;&gt; v7;      v7 -= <span class="hljs-number">8</span>;      v8[<span class="hljs-number">28</span>] = v10;    &#125;    <span class="hljs-keyword">for</span> ( len = <span class="hljs-number">4</span>; len != <span class="hljs-number">32</span>; ++len )           <span class="hljs-comment">// len为4</span>    &#123;      <span class="hljs-keyword">if</span> ( (*(<span class="hljs-keyword">unsigned</span> __int8 *)(a2 + len) ^ len) != <span class="hljs-number">0x5E</span> )      &#123;        len_1 = *(_DWORD *)(a1 + <span class="hljs-number">64</span>);        <span class="hljs-keyword">goto</span> LABEL_10;      &#125;    &#125;  &#125;  <span class="hljs-keyword">else</span>  &#123;LABEL_10:    *(_BYTE *)(a1 + len) = <span class="hljs-number">0x80</span>;                <span class="hljs-comment">// a1[len]设置为0x80 说明只取前4字节 而之前设置的长度(*(a1+64))没有重新设置</span>    v11 = len + <span class="hljs-number">1</span>;    <span class="hljs-keyword">if</span> ( len_1 &gt;= <span class="hljs-number">0x38</span> )    &#123;      <span class="hljs-keyword">while</span> ( v11 &lt;= <span class="hljs-number">0x3F</span> )        *(_BYTE *)(a1 + v11++) = <span class="hljs-number">0</span>;      j_sha256_transform(a1, a1);      *(_DWORD *)(a1 + <span class="hljs-number">48</span>) = <span class="hljs-number">0</span>;      *(_QWORD *)(a1 + <span class="hljs-number">32</span>) = <span class="hljs-number">0L</span>L;      *(_QWORD *)(a1 + <span class="hljs-number">40</span>) = <span class="hljs-number">0L</span>L;      *(_QWORD *)(a1 + <span class="hljs-number">16</span>) = <span class="hljs-number">0L</span>L;      *(_QWORD *)(a1 + <span class="hljs-number">24</span>) = <span class="hljs-number">0L</span>L;      *(_QWORD *)a1 = <span class="hljs-number">0L</span>L;      *(_QWORD *)(a1 + <span class="hljs-number">8</span>) = <span class="hljs-number">0L</span>L;      *(_DWORD *)(a1 + <span class="hljs-number">52</span>) = <span class="hljs-number">0</span>;    &#125;    <span class="hljs-keyword">else</span>    &#123;      <span class="hljs-keyword">while</span> ( v11 &lt;= <span class="hljs-number">0x37</span> )        *(_BYTE *)(a1 + v11++) = <span class="hljs-number">0</span>;    &#125;    v12 = *(_QWORD *)(a1 + <span class="hljs-number">72</span>) + (<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span>)(<span class="hljs-number">8</span> * *(_DWORD *)(a1 + <span class="hljs-number">64</span>));    *(_BYTE *)(a1 + <span class="hljs-number">63</span>) = v12;    *(_QWORD *)(a1 + <span class="hljs-number">72</span>) = v12;    *(_BYTE *)(a1 + <span class="hljs-number">62</span>) = BYTE1(v12);    *(_BYTE *)(a1 + <span class="hljs-number">61</span>) = BYTE2(v12);    *(_BYTE *)(a1 + <span class="hljs-number">60</span>) = BYTE3(v12);    *(_BYTE *)(a1 + <span class="hljs-number">59</span>) = BYTE4(v12);    *(_BYTE *)(a1 + <span class="hljs-number">58</span>) = BYTE5(v12);    *(_BYTE *)(a1 + <span class="hljs-number">57</span>) = BYTE6(v12);    *(_BYTE *)(a1 + <span class="hljs-number">56</span>) = HIBYTE(v12);    j_sha256_transform(a1, a1);    len = <span class="hljs-number">0</span>;    v13 = <span class="hljs-number">24</span>;    <span class="hljs-keyword">while</span> ( len != <span class="hljs-number">4</span> )    &#123;      *(_BYTE *)(a2 + len) = *(_DWORD *)(a1 + <span class="hljs-number">80</span>) &gt;&gt; v13;      v14 = (_BYTE *)(a2 + len++);      v14[<span class="hljs-number">4</span>] = *(_DWORD *)(a1 + <span class="hljs-number">84</span>) &gt;&gt; v13;      v14[<span class="hljs-number">8</span>] = *(_DWORD *)(a1 + <span class="hljs-number">88</span>) &gt;&gt; v13;      v14[<span class="hljs-number">12</span>] = *(_DWORD *)(a1 + <span class="hljs-number">92</span>) &gt;&gt; v13;      v14[<span class="hljs-number">16</span>] = *(_DWORD *)(a1 + <span class="hljs-number">96</span>) &gt;&gt; v13;      v14[<span class="hljs-number">20</span>] = *(_DWORD *)(a1 + <span class="hljs-number">100</span>) &gt;&gt; v13;      v14[<span class="hljs-number">24</span>] = *(_DWORD *)(a1 + <span class="hljs-number">104</span>) &gt;&gt; v13;      v15 = *(_DWORD *)(a1 + <span class="hljs-number">108</span>) &gt;&gt; v13;      v13 -= <span class="hljs-number">8</span>;      v14[<span class="hljs-number">28</span>] = v15;    &#125;  &#125;  <span class="hljs-keyword">return</span> len;</code></pre><p>其中sha256的运算需要修改一下：</p><pre><code class="hljs c"><span class="hljs-keyword">uint64_t</span> bits_len = <span class="hljs-number">0x100</span>;<span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">8</span>; i++) &#123;buf[len + append + i] = (bits_len &gt;&gt; ((<span class="hljs-number">7</span> - i) * <span class="hljs-number">8</span>)) &amp; <span class="hljs-number">0xff</span>;&#125;</code></pre><p>之后穷举出密码就行了，虽然4字节很少，但python效率仍然太差，C++代码实现如下：</p><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">int</span> argc, <span class="hljs-keyword">char</span>* argv[])</span> </span>&#123;    <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">char</span> enc [] =        &#123;        <span class="hljs-number">0x2d</span>, <span class="hljs-number">0x18</span>, <span class="hljs-number">0x6a</span>, <span class="hljs-number">0x3e</span>, <span class="hljs-number">0x17</span>, <span class="hljs-number">0x2a</span>, <span class="hljs-number">0x14</span>, <span class="hljs-number">0x67</span>, <span class="hljs-number">0x37</span>, <span class="hljs-number">0x89</span>, <span class="hljs-number">0xf4</span>, <span class="hljs-number">0x99</span>, <span class="hljs-number">0xcd</span>, <span class="hljs-number">0x6c</span>, <span class="hljs-number">0xfb</span>, <span class="hljs-number">0xcd</span>,        <span class="hljs-number">0x29</span>, <span class="hljs-number">0xb6</span>, <span class="hljs-number">0xc7</span>, <span class="hljs-number">0x3f</span>, <span class="hljs-number">0x4b</span>, <span class="hljs-number">0x4a</span>, <span class="hljs-number">0x27</span>, <span class="hljs-number">0xc2</span>, <span class="hljs-number">0x34</span>, <span class="hljs-number">0x64</span>, <span class="hljs-number">0x77</span>, <span class="hljs-number">0x68</span>, <span class="hljs-number">0x25</span>, <span class="hljs-number">0xaf</span>, <span class="hljs-number">0x90</span>, <span class="hljs-number">0xb2</span>        &#125;;    <span class="hljs-keyword">const</span> <span class="hljs-keyword">uint8_t</span> flagh[]=<span class="hljs-string">&quot;ByteCTF&#123;&quot;</span>;    <span class="hljs-keyword">uint32_t</span> cur=<span class="hljs-number">0x30303030</span>;    <span class="hljs-keyword">uint8_t</span>* i;    <span class="hljs-keyword">uint8_t</span>* j;    <span class="hljs-keyword">uint8_t</span>* k;    <span class="hljs-keyword">uint8_t</span>* l;    i=(<span class="hljs-keyword">uint8_t</span>*)(&amp;cur);    j=(<span class="hljs-keyword">uint8_t</span>*)(&amp;cur)+<span class="hljs-number">1</span>;    k=(<span class="hljs-keyword">uint8_t</span>*)(&amp;cur)+<span class="hljs-number">2</span>;    l=(<span class="hljs-keyword">uint8_t</span>*)(&amp;cur)+<span class="hljs-number">3</span>;    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Start\n&quot;</span>);    <span class="hljs-keyword">for</span> ( *i = <span class="hljs-number">0x30</span>; *i &lt; <span class="hljs-number">0x7a</span>; ++*i)    &#123;        <span class="hljs-keyword">for</span> ( *j = <span class="hljs-number">0x30</span>; *j &lt; <span class="hljs-number">0x7a</span>; ++*j)        &#123;            <span class="hljs-keyword">for</span> ( *k = <span class="hljs-number">0x30</span>; *k &lt; <span class="hljs-number">0x7a</span>; ++*k)            &#123;                <span class="hljs-keyword">for</span> ( *l = <span class="hljs-number">0x30</span>; *l &lt; <span class="hljs-number">0x7a</span>; ++*l)                &#123;                    <span class="hljs-keyword">char</span> hash[<span class="hljs-number">32</span>];                    <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">char</span> output[<span class="hljs-number">100</span>];                    sha256((<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span>*)&amp;cur,hash);                    AESModeOfOperation moo;                    moo.set_key((<span class="hljs-keyword">uint8_t</span>*)hash);                    moo.set_mode(MODE_CBC);                    moo.set_iv((<span class="hljs-keyword">uint8_t</span>*)hash+<span class="hljs-number">16</span>);                    <span class="hljs-keyword">int</span> olen = <span class="hljs-keyword">sizeof</span> (enc);                    <span class="hljs-keyword">int</span> len = moo.Decrypt(enc, olen, output);                    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">memcmp</span>(output,flagh,<span class="hljs-keyword">sizeof</span>(flagh)<span class="hljs-number">-1</span>)==<span class="hljs-number">0</span>)                    &#123;                        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s\n&quot;</span>,&amp;cur);                        hexOutput(output,<span class="hljs-number">32</span>);                        <span class="hljs-keyword">goto</span> over;                    &#125;                &#125;            &#125;        &#125;    &#125;    over:    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;end&quot;</span>);    getchar();    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre><p>为了避免输出出现问题，将解密后的flag输出为hex字符串&quot;427974654354467b34316d5f6630725f7468655f686939686535747d04040404&quot;</p><p>解码后即得flag：ByteCTF{41m_f0r_the_hi9he5t}</p><h3 id="wp合集"><a class="markdownIt-Anchor" href="#wp合集"></a> WP合集</h3><p><a href="https://bytectf.feishu.cn/docs/doccnqzpGCWH1hkDf5ljGdjOJYg">官方WP</a></p><p><a href="https://mp.weixin.qq.com/s/4OVC10crL1rBFrNf9wyUTg">WP By W&amp;M</a></p><p><a href="https://northity.com/2020/10/30/ByteCTF%E5%88%9D%E8%B5%9B%E5%87%BA%E9%A2%98%E7%AC%94%E8%AE%B0/">easy_scrapy出题笔记</a></p><p><a href="https://y4tacker.blog.csdn.net/article/details/109372670">CSDN_Web</a></p><p><a href="http://www.fzwjscj.xyz/index.php/archives/39/">Misc_Watermark</a></p><p><a href="https://ca0y1h.top/Web_security/ctf_writeup/26.ByteCTF2020-scrapy-redis%E5%A4%8D%E7%8E%B0/">easy_scrapy复现</a></p><h2 id="第6届上海市大学生网络安全大赛"><a class="markdownIt-Anchor" href="#第6届上海市大学生网络安全大赛"></a> 第6届上海市大学生网络安全大赛</h2><h3 id="misc-2"><a class="markdownIt-Anchor" href="#misc-2"></a> Misc</h3><h4 id="签到"><a class="markdownIt-Anchor" href="#签到"></a> 签到</h4><p>base64解码，搜索<code>tr</code>命令，理解意图即得</p><h4 id="pcap"><a class="markdownIt-Anchor" href="#pcap"></a> pcap</h4><p>分析附件中的dnp3协议</p><h4 id="可乐加冰"><a class="markdownIt-Anchor" href="#可乐加冰"></a> 可乐加冰</h4><p>一张PNG图片，虽然能打开，但是不显示缩略图，好像末尾的DATx块有问题，但改过后仍然不知道如何继续，谷歌搜图无法处理该图片。</p><h3 id="web"><a class="markdownIt-Anchor" href="#web"></a> Web</h3><h4 id="千毒网盘"><a class="markdownIt-Anchor" href="#千毒网盘"></a> 千毒网盘</h4><p>默认提取码为114154，似乎是一个梗，但我不知道它在提示什么，这个提取码只能下载到<a href="gamectf.com">永信至诚</a>官网上的一张图片，只是广告。</p><p><img src="http://gamectf.com/p/CGBU.png" alt="" /></p><p>尝试爆破6位纯数字提取码，但单线程实在破不出，感觉方向不对。</p><p>其实是一道布尔盲注</p><h4 id="trytologin"><a class="markdownIt-Anchor" href="#trytologin"></a> TryToLogin</h4><p>一个登录界面，输入用户名admin，密码password会显示成功登录，但不知道如何继续。</p>]]></content>
    
    
    <categories>
      
      <category>比赛</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C指针复盘</title>
    <link href="/2020/11/03/C-Pointer/"/>
    <url>/2020/11/03/C-Pointer/</url>
    
    <content type="html"><![CDATA[<h3 id="前言"><a class="markdownIt-Anchor" href="#前言"></a> 前言</h3><p>指针是学习C语言时无法绕过的概念，但由于其在算法竞赛中绝少使用，导致本人对指针的理解仍有许多模糊之处，学习Python、JavaScript等编程语言时，也从未遇到过指针，只有对象、引用这些更为抽象的概念。而要深入理解指针的本质和意义，必须对计算机内存模型和寻址方式先作了解，这无疑又得费番工夫。水平所限，本文无法对C的指针给出精妙的见解，仅是尝试帮助大一新生更好地准备考试，若文中出现错误，还望尽快指出。若要严谨地讨论C语言，得求教SSS学长。</p><p>约定本文中出现的<code>p</code>均表示指针变量，<code>a</code>表示数组名，其他字母(如<code>x</code>,<code>y</code>一律假设为<code>int</code>型变量。</p><h3 id="定义"><a class="markdownIt-Anchor" href="#定义"></a> 定义</h3><blockquote><p>指针（pointer）是一个值为内存地址的变量（或数据对象）</p></blockquote><p>分析主谓宾，将原句拆成两句话即</p><ul><li>指针是一个变量</li><li>指针的值是内存地址</li></ul><p>“变量”这一概念，学习过C语言基本数据类型使用的人都不会陌生，既然是变量，那么有声明、赋值等一系列常规操作，概念在书上讲得更为系统，这里就从略，只重点介绍一下<code>*</code>和<code>&amp;</code>这两个初学者容易混淆的运算符。</p><p>在C语言中，同一个符号可以承载多种含义，需要根据前后所操作变量的个数和类型来判断。</p><p><code>&amp;</code>，学到现在可以看到两种形态</p><ul><li>按位与运算符<code>x&amp;y</code>，对数字的二进制形式进行按位与操作，认识即可。</li><li>取地址运算符(<code>&amp;x</code>)，后面跟着一个变量，作用是取出该变量在内存中的地址。<ul><li><code>printf()</code>输出时格式化字符为<code>%p</code></li><li>但是不能直接对<code>&amp;x</code>赋值，因为<code>&amp;x</code>只是临时的数据，而不是<em>左值</em>，所以需要请出指针</li></ul></li><li>其实在C++中还有<em>引用</em>这一形态，这里略去不讲</li></ul><p><code>*</code>，学到现在可以看到三种形态</p><ul><li>乘法运算符(<code>x*y</code>)：最初的形态，就是将前后两个数相乘，很容易看出它是二元操作符，需要两个操作对象，而下面两种用法都只跟着一个变量。</li><li>解引用运算符(<code>*p</code>)：又叫间接运算符，后面跟着一个指针(由于单从变量的名字上看不出它是不是指针，所以可能容易迷惑)，作用是给出指针所指向地址上的值，比如指针<code>p</code>的值是变量<code>x</code>的地址(即<code>&amp;x</code>)，那<code>*p</code>就是<code>x</code><ul><li>大概可以理解成取地址运算符的逆运算</li><li>但<code>*p</code>是<em>左值</em>，可以被赋值；而<code>&amp;x</code>不是<em>左值</em>，不可被赋值</li></ul></li><li>声明指针(<code>int * p = &amp;x;</code>)：前面接着数据类型(如<code>int</code>,<code>double</code>，后面跟着指针的名字。注意这是在<strong>声明</strong>一个指针变量，不要和上面的解引用运算符混淆。<ul><li><code>*</code>本身不是指针名的一部分</li><li><code>*</code>前的数据类型是指针所指变量的类型</li><li><code>*</code>和指针名之间的空格可有可无。通常，程序员在声明时使用空格，在解引用变量时省略空格。<ul><li>实际经过尝试在现代编译器下，<code>*</code>前后有无空格都能编译通过。一行只定义一个指针变量时，一般也不会造成误解。但考试给的代码中会出现一行中同时声明指针变量和其他变量的情况，需要注意只有<code>*</code>跟着的变量才是指针。</li><li>所以遇到题目的代码里声明指针时，<code>*</code>后紧贴指针名也正常，要能辨认出。</li></ul></li></ul></li></ul><p>运算符的优先级：<code>()</code>&gt;<code>[]</code>&gt;<code>*</code></p><p>区分：“指针的类型”和“指针所指向的类型”</p><ul><li>指针的类型：把指针名(不含<code>*</code>)去掉，剩下部分就是指针的类型</li><li>指针所指向的类型：把指针名和它左边的<code>*</code>去掉，剩下部分就是指针所指向的类型</li></ul><p>若觉赘述太多，陷入了概念的迷宫，也不想花太多时间在指针上，可以强记以下形式：声明(定义、初始化)变量时<code>int * p = &amp;x;</code>赋值时<code>p=&amp;x</code>，<code>*p=x</code>，以及同类型变量互相赋值，这些选项是正确的。</p><h3 id="指针和数组"><a class="markdownIt-Anchor" href="#指针和数组"></a> 指针和数组</h3><p>C语言中很多特性都共享相似的形式，指针和数组就是这样。</p><p>一般而言数组名<code>a</code>代表数组本身，类型是<code>int [SIZE]</code>，但把若<code>a</code>看作指针，则它指向数组的第0个单元，指针类型是<code>int *</code>，指针所指向的类型是数组单元的类型，即<code>int</code>，可以记住以下等式<code>a=&amp;a[0]</code>,<code>*a=a[0]</code>。</p><h3 id="指针和函数"><a class="markdownIt-Anchor" href="#指针和函数"></a> 指针和函数</h3><ul><li>参数为指针</li><li>参数为数组</li><li>函数返回值为指针</li></ul><h3 id="指针和字符串"><a class="markdownIt-Anchor" href="#指针和字符串"></a> 指针和字符串</h3><h3 id="深入阅读"><a class="markdownIt-Anchor" href="#深入阅读"></a> 深入阅读</h3><p>《C Primer Plus》(微信读书即可方便阅读)</p><p><a href="https://nettee.github.io/posts/2018/Understanding-lvalues-and-rvalues-in-C-and-C">理解 C/C++ 中的左值和右值</a></p><p><a href="https://www.cnblogs.com/zlcxbb/p/6576153.html">指针超强汇总</a></p>]]></content>
    
    
    <categories>
      
      <category>编程语言</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Computer Networks</title>
    <link href="/2020/11/01/Network/"/>
    <url>/2020/11/01/Network/</url>
    
    <content type="html"><![CDATA[<h2 id="introduction"><a class="markdownIt-Anchor" href="#introduction"></a> Introduction</h2><p><strong>distributed system</strong> VS <strong>computer networks</strong></p><p>key distinction : <strong>middleware</strong></p><p>a distributed system is a <em>software</em> system built on top of a network</p><h3 id="uses"><a class="markdownIt-Anchor" href="#uses"></a> Uses</h3><h4 id="business-applications"><a class="markdownIt-Anchor" href="#business-applications"></a> Business Applications</h4><p><strong>resource sharing</strong></p><ul><li>VPNs</li><li>client-server model</li></ul><p><strong>commuinication medium</strong></p><ul><li>email</li><li>VoIP</li><li>desktop sharing</li></ul><p><strong>e-commerce</strong></p><h4 id="home-applications"><a class="markdownIt-Anchor" href="#home-applications"></a> Home Applications</h4><p><strong>Metcalfe’s law</strong> hypothesizes the value of a network</p><ul><li>P2P communication</li><li>social network</li><li>access information</li></ul><h4 id="mobile-users"><a class="markdownIt-Anchor" href="#mobile-users"></a> Mobile Users</h4><ul><li>RFID</li><li>Sensor networks</li><li>Wearable computers</li></ul><p>Wireless? * Mobile? = 4 types</p><h3 id="network-hardware"><a class="markdownIt-Anchor" href="#network-hardware"></a> Network Hardware</h3><p>two dimensions to classify: <strong>transmission technology</strong> and <strong>scale</strong></p><p>By transmission technology : <strong>broadcast</strong> links and <strong>point-to-point</strong> links</p><ul><li><p>broadcast</p><ul><li>channel shared by all machines on network</li><li>any packets received by all</li><li>address field within packet specifies intended recipient</li></ul></li><li><p>point-to-point</p><ul><li>first visit intermediate machines</li><li>multiple routes of different lengths</li></ul></li></ul><p>By scale : PAN, LAN, MAN, WAN, internetwork</p><h4 id="peronal-area-network"><a class="markdownIt-Anchor" href="#peronal-area-network"></a> Peronal Area Network</h4><ul><li>Bluetooth</li><li>RFID</li></ul><h4 id="local-area-network"><a class="markdownIt-Anchor" href="#local-area-network"></a> Local Area Network</h4><ul><li><p>Wireless LANs</p><ul><li>Device : AP (Access Point), wireless router,  base station<ul><li>relay packets between computers</li></ul></li><li>Standard : IEEE 802.11 (WiFi)<ul><li>Speed: from 11 to hundreds of Mbps</li></ul></li></ul></li><li><p>Wired LANs</p><ul><li>Device : copper wires or optical fiber</li><li>Standard : IEEE 802.3 (Ethernet)<ul><li>switched Ethernet</li><li>topology built from P2P links<ul><li>a switch has multiple ports</li></ul></li></ul></li></ul></li><li><p>VLAN</p><ul><li>divide one physical LAN into two smaller logical LANs</li></ul></li></ul><p>Both wireless and wired broadcast networks can be divided into <strong>static</strong> and <strong>dynamic</strong> designs, depending on how the channel is located.</p><p><strong>Power-line network</strong> : reuse electronic wires already installed, carry both power and data signals simultaneously, using different frequency bands</p><h4 id="metropolitan-area-network"><a class="markdownIt-Anchor" href="#metropolitan-area-network"></a> Metropolitan Area Network</h4><ul><li>cable television networks</li><li>IEEE 802.16 (<strong>WiMAX</strong>)</li></ul><h4 id="wide-area-network"><a class="markdownIt-Anchor" href="#wide-area-network"></a> Wide Area Network</h4><ul><li><p><strong>hosts</strong></p></li><li><p><strong>communication subnet</strong></p><ul><li><strong>subnet</strong> here only means <u>a collection of lines and routers</u></li><li>transmission lines<ul><li>move bits between machines</li><li>made of copper wire, optical fiber or radio links</li></ul></li><li>switching elements (<strong>router</strong>)<ul><li>specialized computers connecting transmission lines</li></ul></li></ul><p>WAN is not a large wired LAN ! Differences:</p><ul><li>In a WAN, hosts and subnet are owned and operated by different people, leading to <u>seperation of communication aspects(subnet) from application aspects(hosts)</u>, which simplifies the overall network design</li><li>Many WANs are actually <strong>internetworks</strong> because routers usually <u>connect different kinds of networking technology</u>.</li></ul><p>Varieties of WANs</p><ul><li>VPN<ul><li>link via Internet rather than lease dedicated lines</li><li>Pro : flexible reuse of resource</li><li>Con : lack of control over underlying resources</li></ul></li><li>ISP network</li></ul><p><strong>routing algorithm</strong> : which path to use</p><p><strong>forwarding algorithm</strong> : where to send a packet next</p><p>cellular telephone network and its three generations</p><ul><li>1st : analog + voice only</li><li>2nd : digital + voice only</li><li>3rd : digital + voice and data</li></ul></li></ul><h4 id="internetworks"><a class="markdownIt-Anchor" href="#internetworks"></a> Internetworks</h4><p>subnets, networks and internetworks are often confused.</p><p>network = a subnet + its hosts</p><p><strong>gateway</strong> : the gernal name for a machine making connections between networks and providing necessary translation, both in terms of hardware and software</p><p>Gateway cannot be too low-level or too high-level (Why? P51). It is in the middle level called network layer. A router is a gateway swithing packets at the network layer.</p>]]></content>
    
    
    <categories>
      
      <category>计算机理论</category>
      
    </categories>
    
    
    <tags>
      
      <tag>计算机网络</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Discrete Math</title>
    <link href="/2020/10/30/Discrete-Math/"/>
    <url>/2020/10/30/Discrete-Math/</url>
    
    <content type="html"><![CDATA[<p>主要依据知识点在</p><p>列出历年卷中出现的部分知识点，仅供参考</p><h2 id="集合"><a class="markdownIt-Anchor" href="#集合"></a> 集合</h2><p>空集的理解，属于和包含于</p><h2 id="命题逻辑"><a class="markdownIt-Anchor" href="#命题逻辑"></a> 命题逻辑</h2><h4 id="理解"><a class="markdownIt-Anchor" href="#理解"></a> 理解</h4><p>命题的概念（时空可知、未知量）</p><p>复合命题注意语法陷阱</p><h4 id="运用"><a class="markdownIt-Anchor" href="#运用"></a> 运用</h4><p>主范式演算证明</p><p>推理的三种方法</p><p>析取式(p或q)，合取式(p且q)</p><p>简单析/合取式：由有限个文字构成的析/合取式</p><p>析取范式：由有限个简单合取式构成的析取式 合取范式：由有限个简单析取式构成的合取式<br />(求范式：1.化联结词 2.双重否定消去否+德摩根律内移否 3.分配律)</p><p>极大项：含n个命题变项的简单析取式，每个命题变项和其否定不同时出现，二者之一必出现且仅出现一次，第i个命题变项或其否定出现在从左算起第i位上<br />极小项：含n个命题变项的简单合取式，每个命题变项和其否定不同时出现，二者之一必出现且仅出现一次，第i个命题变项或其否定出现在从左算起第i位上<br />(记忆：极大项只有一个成假赋值，所以是析取式)</p><p>主析取范式：n个命题变项构成的析取范式中所有简单合取式都是极小项<br />主合取范式：n个命题变项构成的析取范式中所有简单合取式都是极大项<br />(求主范式：1.先求范式 2.所有简单式展开长度为n 3.消重复 4.按角标从小到大排序)<br /><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>∑</mo><mo stretchy="false">(</mo><mn>1</mn><mo separator="true">,</mo><mn>3</mn><mo separator="true">,</mo><mn>5</mn><mo stretchy="false">)</mo><mi mathvariant="normal">表</mi><mi mathvariant="normal">示</mi><mi mathvariant="normal">主</mi><mi mathvariant="normal">析</mi><mi mathvariant="normal">取</mi><mi mathvariant="normal">范</mi><mi mathvariant="normal">式</mi><msub><mi>m</mi><mn>1</mn></msub><mo>∨</mo><msub><mi>m</mi><mn>3</mn></msub><mo>∨</mo><msub><mi>m</mi><mn>5</mn></msub><mspace width="1em"/><mo>∏</mo><mo stretchy="false">(</mo><mn>2</mn><mo separator="true">,</mo><mn>4</mn><mo stretchy="false">)</mo><mi mathvariant="normal">表</mi><mi mathvariant="normal">示</mi><mi mathvariant="normal">主</mi><mi mathvariant="normal">合</mi><mi mathvariant="normal">取</mi><mi mathvariant="normal">范</mi><mi mathvariant="normal">式</mi><msub><mi>m</mi><mn>2</mn></msub><mo>∧</mo><msub><mi>m</mi><mn>4</mn></msub></mrow><annotation encoding="application/x-tex">\sum(1,3,5)表示主析取范式m_1\vee m_3\vee m_5\quad\prod(2,4)表示主合取范式 m_2\wedge m_4</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.00001em;vertical-align:-0.25001em;"></span><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∑</span><span class="mopen">(</span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">3</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">5</span><span class="mclose">)</span><span class="mord cjk_fallback">表</span><span class="mord cjk_fallback">示</span><span class="mord cjk_fallback">主</span><span class="mord cjk_fallback">析</span><span class="mord cjk_fallback">取</span><span class="mord cjk_fallback">范</span><span class="mord cjk_fallback">式</span><span class="mord"><span class="mord mathdefault">m</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∨</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.7055600000000001em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">m</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∨</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.00001em;vertical-align:-0.25001em;"></span><span class="mord"><span class="mord mathdefault">m</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">5</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace" style="margin-right:1em;"></span><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∏</span><span class="mopen">(</span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">4</span><span class="mclose">)</span><span class="mord cjk_fallback">表</span><span class="mord cjk_fallback">示</span><span class="mord cjk_fallback">主</span><span class="mord cjk_fallback">合</span><span class="mord cjk_fallback">取</span><span class="mord cjk_fallback">范</span><span class="mord cjk_fallback">式</span><span class="mord"><span class="mord mathdefault">m</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∧</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">m</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">4</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><br />主析取范式中极小项的个数即为成真赋值的个数，主合取范式中极大项的个数即为成假赋值的个数</p><h2 id="谓词逻辑"><a class="markdownIt-Anchor" href="#谓词逻辑"></a> 谓词逻辑</h2><h4 id="理解-2"><a class="markdownIt-Anchor" href="#理解-2"></a> 理解</h4><p>个体词、谓词、量词 常项变项</p><p>单独的谓词不是完整命题，谓词填式：谓词字母后填以客体所得式</p><p>个体域(论域):个体变项的取值范围</p><p>全总个体域</p><p>一阶语言及其字母表</p><p>原子公式</p><p>合式公式(谓词公式)，简称公式</p><p>指导变元、量词的辖域 指导变元的<strong>约束出现</strong>/<strong>自由出现</strong></p><p><strong>闭式</strong>(不含自由个体变项)，在给定的解释中变成命题</p><h4 id="运用-2"><a class="markdownIt-Anchor" href="#运用-2"></a> 运用</h4><p>命题符号化，正确使用特性谓词</p><p>求前束范式</p><h2 id="关系"><a class="markdownIt-Anchor" href="#关系"></a> 关系</h2><h4 id="理解-3"><a class="markdownIt-Anchor" href="#理解-3"></a> 理解</h4><p>关系的性质（自反、对称、传递）的定义和表示（集合表达式、关系矩阵、关系图三种形式）</p><p>等价关系（自反&amp;对称&amp;传递）</p><p>等价类：A中与x等价的全体元素构成的子集</p><p>商集(A/R)：A上全体等价类构成的集合称作A关于R的商集</p><p>哈斯图</p><h4 id="运用-3"><a class="markdownIt-Anchor" href="#运用-3"></a> 运用</h4><p>求 自反/对称闭包</p><p>Warshall算法求传递闭包t®的关系矩阵（第i行加在第i列中1所在行上）</p><p>画偏序集的哈斯图，求最大(小)元、极大(小)、上(下)确界</p><h2 id="函数"><a class="markdownIt-Anchor" href="#函数"></a> 函数</h2><h4 id="理解-4"><a class="markdownIt-Anchor" href="#理解-4"></a> 理解</h4><p>单射（入射）、满射（到上映射）、双射的定义</p><p>是否具有传递性</p><p>前域、值域、共域</p><h2 id="图"><a class="markdownIt-Anchor" href="#图"></a> 图</h2><h4 id="理解-5"><a class="markdownIt-Anchor" href="#理解-5"></a> 理解</h4><p>k(G), λ(G), δ(G) 分别是？  点连通度，边连通度，最小度</p><p>生成子图    导出子图(两种)</p><p>二部图</p><h4 id="运用-4"><a class="markdownIt-Anchor" href="#运用-4"></a> 运用</h4><p>求最小生成树</p><p>哈密尔顿图的判定</p><ul><li>充分条件:<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi><mo stretchy="false">(</mo><mi>u</mi><mo stretchy="false">)</mo><mo>+</mo><mi>d</mi><mo stretchy="false">(</mo><mi>v</mi><mo stretchy="false">)</mo><mo>≥</mo><mi>n</mi><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">d(u)+d(v)≥n-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">d</span><span class="mopen">(</span><span class="mord mathdefault">u</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">d</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>；推论：无限简单图最小度达点半数则是哈密顿图</li><li>必要条件:<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>p</mi><mo stretchy="false">(</mo><mi>G</mi><mo>−</mo><msub><mi>V</mi><mn>1</mn></msub><mo stretchy="false">)</mo><mo>≤</mo><mi mathvariant="normal">∣</mi><msub><mi>V</mi><mn>1</mn></msub><mi mathvariant="normal">∣</mi></mrow><annotation encoding="application/x-tex">p(G-V_1)≤|V_1|</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">p</span><span class="mopen">(</span><span class="mord mathdefault">G</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.22222em;">V</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.22222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">∣</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.22222em;">V</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.22222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord">∣</span></span></span></span>；推论：有割点必非哈密顿图</li></ul><p>平面图的判定</p><ul><li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>m</mi><mo>≤</mo><mfrac><mi>l</mi><mrow><mi>l</mi><mo>−</mo><mn>2</mn></mrow></mfrac><mo stretchy="false">(</mo><mi>n</mi><mo>−</mo><mn>2</mn><mo stretchy="false">)</mo><mo separator="true">,</mo><mi mathvariant="normal">每</mi><mi mathvariant="normal">个</mi><mi mathvariant="normal">面</mi><mi mathvariant="normal">的</mi><mi mathvariant="normal">次</mi><mi mathvariant="normal">数</mi><mi mathvariant="normal">至</mi><mi mathvariant="normal">少</mi><mi mathvariant="normal">为</mi><mi>l</mi></mrow><annotation encoding="application/x-tex">m\leq \frac{l}{l-2}(n-2),每个面的次数至少为l</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7719400000000001em;vertical-align:-0.13597em;"></span><span class="mord mathdefault">m</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.283439em;vertical-align:-0.403331em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8801079999999999em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.01968em;">l</span><span class="mbin mtight">−</span><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.01968em;">l</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.403331em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">2</span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord cjk_fallback">每</span><span class="mord cjk_fallback">个</span><span class="mord cjk_fallback">面</span><span class="mord cjk_fallback">的</span><span class="mord cjk_fallback">次</span><span class="mord cjk_fallback">数</span><span class="mord cjk_fallback">至</span><span class="mord cjk_fallback">少</span><span class="mord cjk_fallback">为</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span></span></span></span></li><li>必不含<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>K</mi><mrow><mn>3</mn><mo separator="true">,</mo><mn>3</mn></mrow></msub></mrow><annotation encoding="application/x-tex">K_{3,3}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.969438em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">K</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.301108em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3</span><span class="mpunct mtight">,</span><span class="mord mtight">3</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span>和<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>K</mi><mn>5</mn></msub></mrow><annotation encoding="application/x-tex">K_5</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">K</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">5</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></li></ul><h2 id="代数系统"><a class="markdownIt-Anchor" href="#代数系统"></a> 代数系统</h2><h4 id="理解-6"><a class="markdownIt-Anchor" href="#理解-6"></a> 理解</h4><p>二元运算 运算律</p><p>特异元 子代数</p><p>有限循环群</p><h4 id="运用-5"><a class="markdownIt-Anchor" href="#运用-5"></a> 运用</h4><p>证明半群/独异点/群的在同态映射f下的同态像也是半群/独异点/群</p><p>写出生成元和子群，画子群格</p><p>证明H是G的子群</p><ul><li>证明e∈H，得H非空</li><li>证明a*b<sup>-1</sup>∈H（常见交换律，用交换证明逆元也具交换律即可）</li></ul><p>群的性质</p>]]></content>
    
    
    <categories>
      
      <category>课内</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数学</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CSAPP</title>
    <link href="/2020/10/28/CSAPP/"/>
    <url>/2020/10/28/CSAPP/</url>
    
    <content type="html"><![CDATA[<p><a href="http://csapp.cs.cmu.edu/3e/students.html">Site</a>  <a href="http://csapp.cs.cmu.edu/3e/labs.html">Labs</a> <a href="http://csapp.cs.cmu.edu/3e/figures.html">Figures</a> <a href="https://www.bilibili.com/video/BV1iW411d7hd">Lecture</a></p><h2 id="ch1-a-tour-of-computer-systems"><a class="markdownIt-Anchor" href="#ch1-a-tour-of-computer-systems"></a> Ch1  A Tour of Computer Systems</h2><h3 id="information-is-bitscontext"><a class="markdownIt-Anchor" href="#information-is-bitscontext"></a> Information Is Bits+Context</h3><p><strong>text files</strong> consist exclusively of ASCII characters<br />All other files are known as <strong>binary files</strong></p><h3 id="compilation-system"><a class="markdownIt-Anchor" href="#compilation-system"></a> Compilation system</h3><ul><li><p>preprocessor</p><p>insert header file to program text, creating another file <em>program.i</em></p></li><li><p>compiler</p><p>text file <em>program.i</em> to <em>program.s</em> (assembly program)</p></li><li><p>assembler</p><p><em>program.s</em> to machine-language instructions, packaged in a form called <strong>relocatable</strong> object program</p></li><li><p>linker</p><p>merge .o files to <strong>executable</strong></p></li></ul><h3 id="hardware-organization"><a class="markdownIt-Anchor" href="#hardware-organization"></a> Hardware Organization</h3><ul><li><p>Buses</p><ul><li>carry information between components</li><li>chunks of bytes in fixed-size are called <strong>word</strong></li><li><strong>word size</strong> varies across systems (commonly 4 bytes or 8 bytes)</li></ul></li><li><p>I/O Devices</p><ul><li>connected to the I/O bus by <strong>controller</strong> or <strong>adapter</strong><ul><li>controllers are chip sets in the device itself or on the system’s main printed circuit board(<strong>motherboard</strong>)</li><li>adapter is a card that plugs into a slot on the motherboard</li></ul></li></ul></li><li><p>Main Memory</p><ul><li>consist of a collection of <strong>DRAM</strong>(dynamic random access memory)</li></ul></li><li><p>Processor</p><ul><li>the engine that interprets instructions stored in main memory</li><li>a word-size storage device called <strong>program counter</strong>(also PC) at its core, always pointing at machine-language instructions</li><li>processor <em>appears</em> to operate according to a simple instruction execution model, defined by its <strong>instruction set architecture</strong><ul><li>Load: copy from main memory into register</li><li>Store: copy from register to a location in main memory</li><li>Operate: copy contents of two registers to ALU, perform arithmetic operation on the two words, store result in register</li><li>Jump: extract word from instruction itself, copy that word into PC</li><li>(This kind of <em>copy</em> means <strong>overwriting</strong>!)</li></ul></li></ul></li></ul><h3 id="caches-matter"><a class="markdownIt-Anchor" href="#caches-matter"></a> Caches Matter</h3><p>the <em>processor-memory gap</em> : fast+small+expensive VS slow+large+cheap</p><p><em>memory hierarchy</em> : storage at one level serves as a cache for storage at the next lower level</p><p>Figure 1.9: Example of a seven-level memory hierarchy</p><h3 id="operating-system"><a class="markdownIt-Anchor" href="#operating-system"></a> Operating System</h3><p>primary purposes of OS : protect (? from ?) and provide (? with ?)</p><p>(like a paradox, P15)</p><p>Figure 1.10: <strong>Layered view</strong> of a computer system</p><p>Figure 1.11: <strong>Abstractions</strong> provided by an operating system</p><h5 id="processes"><a class="markdownIt-Anchor" href="#processes"></a> Processes</h5><p>Why can multiple processes run concurrently?  Instructions of processes are <strong>interleaved</strong>.</p><p>Figure 1.12: Process <strong>context switching</strong></p><p>What is <em>context</em>? (P16)</p><p>user : ask -&gt; pass control by invoking <em>system call</em><br />kernel : -&gt; save -&gt; restore -&gt; pass control<br />program : -&gt; run -&gt; terminate -&gt; return<br />system : restore -&gt; pass control back</p><p>Kernel is not a separate process but what? (P17)</p><h5 id="threads"><a class="markdownIt-Anchor" href="#threads"></a> Threads</h5><p>Although we normally think of a process as having a single control flow,in modern systems, a process can actually consist of <strong>multiple execution units</strong>, called <em>threads</em>, each running in the context of the process and sharing the same code and global data.</p><p>Easier to share data, more efficient, faster under multiprocesser than process</p><h5 id="virtual-memory"><a class="markdownIt-Anchor" href="#virtual-memory"></a> Virtual Memory</h5><p>abstraction … process … illusion … exclusive use of main memory</p><p>Figure 1.13: Process virtual address space</p><ul><li>Program code and data<ul><li>begins at same fixed address for all processes, followed by data locations</li></ul></li><li>Heap<ul><li>expand and contract dynamically <strong>at run time</strong> when <code>malloc</code> and <code>free</code></li></ul></li><li>Shared libraries</li><li>Stack<ul><li>expand when call function, contract when return from function</li></ul></li><li>Kernel virtual memory<ul><li>not allowed to r/w by applications</li></ul></li></ul><h5 id="files"><a class="markdownIt-Anchor" href="#files"></a> Files</h5><p>a sequence of bytes</p><p>The notion of file providing a uniform view of varied I/O devices for applications.</p><p>Figure 1.14: A network is another I/O device</p><h3 id="amdahls-law"><a class="markdownIt-Anchor" href="#amdahls-law"></a> Amdahl’s Law</h3><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>S</mi><mo>=</mo><mfrac><msub><mi>T</mi><mrow><mi>o</mi><mi>l</mi><mi>d</mi></mrow></msub><msub><mi>T</mi><mrow><mi>n</mi><mi>e</mi><mi>w</mi></mrow></msub></mfrac><mo>=</mo><mfrac><mn>1</mn><mrow><mo stretchy="false">(</mo><mn>1</mn><mo>−</mo><mi mathvariant="normal">ɑ</mi><mo stretchy="false">)</mo><mo>+</mo><mi mathvariant="normal">ɑ</mi><mi mathvariant="normal">/</mi><mi>k</mi></mrow></mfrac></mrow><annotation encoding="application/x-tex">S=\frac{T_{old}}{T_{new}}=\frac{1}{(1-ɑ)+ɑ/k}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.3392909999999998em;vertical-align:-0.44509999999999994em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.894191em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.16454285714285719em;"><span style="top:-2.357em;margin-left:-0.13889em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mord mathdefault mtight">e</span><span class="mord mathdefault mtight" style="margin-right:0.02691em;">w</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.41586em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3448em;"><span style="top:-2.3487714285714287em;margin-left:-0.13889em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">o</span><span class="mord mathdefault mtight" style="margin-right:0.01968em;">l</span><span class="mord mathdefault mtight">d</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15122857142857138em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.44509999999999994em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.365108em;vertical-align:-0.52em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.845108em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mtight">1</span><span class="mbin mtight">−</span><span class="mord mtight">ɑ</span><span class="mclose mtight">)</span><span class="mbin mtight">+</span><span class="mord mtight">ɑ</span><span class="mord mtight">/</span><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.52em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></p><h3 id="concurrency-and-parallelism"><a class="markdownIt-Anchor" href="#concurrency-and-parallelism"></a> Concurrency and Parallelism</h3><p>two constant demands : do more, run faster</p><p><em>concurrency</em> for more, <em>parallelism</em> for faster</p><h4 id="thread-level-concurrency"><a class="markdownIt-Anchor" href="#thread-level-concurrency"></a> Thread-Level Concurrency</h4><p><em>concurrency</em> = multiple+simultaneous</p><p>Uniprocessor system can only <em>simulate</em> concurrent execution.</p><p><strong>Hyperthreading</strong> (<em>simultaneous multi-threading</em>) allows a single CPU to execute multiple flows of control, which involves multiple copies of some CPU hardware and only single copies of other parts.</p><p>Multiprocessing improve both multiple tasks (reduce simulation of concurrency) and single program (only if expressed in terms of multiple threads).</p><h4 id="instruction-level-parallelism"><a class="markdownIt-Anchor" href="#instruction-level-parallelism"></a> Instruction-Level Parallelism</h4><p><em>pipelining</em> partition the instructions into different steps and processor is organized as a series of stages that can operate in parallel, each performing one of these steps.</p><p><em>superscalar</em> processors can sustain execution rates faster than 1 instruction per cycle</p><h4 id="simd-parallelism"><a class="markdownIt-Anchor" href="#simd-parallelism"></a> SIMD Parallelism</h4><p>single-instruction, multiple data</p><h3 id="abstractions"><a class="markdownIt-Anchor" href="#abstractions"></a> Abstractions</h3><p>add <em>virtual machine</em> to Figure 1.11</p><p><a href="http://csapp.cs.cmu.edu/3e/ics3/intro/abstractions-multi.pdf">Figure 1.18: Some abstractions provided by a computer system</a></p><p>(Remember it!)</p><h2 id="ch2-representing-and-manipulating-information"><a class="markdownIt-Anchor" href="#ch2-representing-and-manipulating-information"></a> Ch2 Representing and Manipulating Information</h2><p>three most important representations of numbers:</p><ul><li>unsigned encodings</li><li>two’s-complement encodings</li><li>floating-point encodings</li></ul><p><em>overflow</em></p><ul><li>incorrect but consistent<ul><li>multiplication is associative and commutative</li></ul></li><li>inconsistent<ul><li>floating-point arithmetic</li></ul></li></ul><h3 id="information-storage"><a class="markdownIt-Anchor" href="#information-storage"></a> Information Storage</h3>]]></content>
    
    
    <categories>
      
      <category>计算机理论</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CSAPP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Now</title>
    <link href="/2020/10/28/Now/"/>
    <url>/2020/10/28/Now/</url>
    
    <content type="html"><![CDATA[<h3 id="秋季课程"><a class="markdownIt-Anchor" href="#秋季课程"></a> 秋季课程</h3><p>OOP：尚未开始</p><p>大学物理：尚未跟上课程进度</p><h3 id="学分完成"><a class="markdownIt-Anchor" href="#学分完成"></a> 学分完成</h3><p>公共基础课 概统 毛概2</p><p>专业基础课 10/59</p><p>专业选修课 0/24</p><p>通识课 8/16</p><ul><li>大二冬 24课时+3课时<ul><li>公基<ul><li>数据分析与智能计算 3学分4课时</li><li>概统 6学分6课时</li></ul></li><li>计组A 5学分6课时</li><li>矩阵代数 5学分6课时</li><li>数据结构1 4学分6课时</li></ul></li><li>大二春 12课时+6课时<ul><li>数据结构2 4学分6课时</li><li>计网A 5学分6课时</li><li>专选<ul><li>Python计算 3学分3课时</li><li>编码理论(第9学期) 3学分3课时</li></ul></li><li>网络空间安全进展 2课时</li><li>通识课 约4学分</li></ul></li><li>大三秋 11课时<ul><li>智能系统控制 4学分5课时</li><li>操作系统1 4学分6课时</li><li>专选<ul><li>图形学 4学分5课时</li><li></li></ul></li></ul></li><li>大三冬<ul><li>操作系统2 4学分6课时</li><li>数据库 4学分5课时</li><li>计算机安全与保密技术 5学分6课时</li><li>专选<ul><li>机器学习基础 3学分 李颖</li></ul></li></ul></li><li>大三春<ul><li>信息安全技术</li></ul></li></ul><h3 id="每日反省"><a class="markdownIt-Anchor" href="#每日反省"></a> 每日反省</h3><p>10.31 又是被院士们拉开差距的一天，先是睡到中午，再是下午低效率学(抄)物理，晚上熬夜摸鱼</p><p>11.1 早上一直在睡觉，下午拖拖拉拉跟上离散进度，历年卷还是没做，晚上用文科方式学计网，不敲代码可能是假计院学生</p><p>11.2-11.3 怎么感觉还是什么都没做，还莫名奇妙多了一些ddl，代码量没有一切免谈</p><p>11.4-11.5 仍然零代码，重温《提纲》《形态》，写完马原报告，学用<code>nodeppt</code>准备讲指针</p><p>11.6-11.8 眼睛肿了，又被拉开差距。搞了一道简单的MISC</p><p>11.9-11.11 什么都在学，什么都不精，看过的没理解，一实践就犯难</p><p>11.12-11.14 大物最后一课，资本形而上学，工具使用；离散最后一课，复习逻辑，实训报告，抢课失败；中午起床比赛（摸鱼）</p><p>11.14-11.16 抢到很多课,觉得负担过重，可又怕大四前修不完。离散数学考完</p><h3 id="11月底前"><a class="markdownIt-Anchor" href="#11月底前"></a> 11月底前</h3><ul><li><p>[ ] Read C++ Primer</p></li><li><p>[ ] Learn Numpy, Pandas</p></li><li><p>[ ] Write a shell</p></li><li><p>[ ] 看完涂尔干《自杀论》</p></li></ul><h3 id="封鱼榜"><a class="markdownIt-Anchor" href="#封鱼榜"></a> 封鱼榜</h3><p>纠结各种字体效果然后去知乎瞎逛看各路大神分析，看了很久仍然云里雾里，看完就忘</p><p>百度右侧热搜</p><p>油管推荐视频，键政</p><p>QQ空间和闲聊群 看了十几天，实在无法控制，直接卸载</p>]]></content>
    
    
    <categories>
      
      <category>记录</category>
      
    </categories>
    
    
    <tags>
      
      <tag>长期更新</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Problems of Setup</title>
    <link href="/2020/10/28/Problems-of-Setup/"/>
    <url>/2020/10/28/Problems-of-Setup/</url>
    
    <content type="html"><![CDATA[<p><a href="https://mrswolf.github.io/zh-cn/2019/05/24/manjaro%E8%B8%A9%E5%9D%91%E8%AE%B0/">Manjaro踩坑记</a></p><h3 id="git多ssh-key配置"><a class="markdownIt-Anchor" href="#git多ssh-key配置"></a> git多SSH Key配置</h3><p>使用ssh代替https进行git远程操作可以省去每次输入帐号的重复步骤，尽管一开始的密钥配置会略显繁琐。</p><pre><code class="hljs bash">ssh-keygen -t rsa -C <span class="hljs-string">&quot;此处填邮箱&quot;</span><span class="hljs-comment">#输入文件名，按两次回车</span><span class="hljs-comment">#ssh-agent -s 无效，则用下面这条</span><span class="hljs-built_in">eval</span> $(ssh-agent -s)ssh-add ~/.ssh/id_rsa</code></pre><p>但若场景要求使用不同的身份进行git操作，则单一的SSH Key就不足以应付，需要生成多个SSH Key。而对应不同的远程主机显然需要不同的Key来连接，这种对应规则就在<code>~/.ssh/config</code>这一文件中，注意Host,HostName即可</p><p>但本人用来存放数据的分区为NTFS格式，linux的权限管理对其无法起作用，所以平时git操作经常要用<code>sudo</code>强制执行。但<code>ssh-keygen</code> <code>ssh-add</code>命令似乎与权限密切相关，是否<code>sudo</code>会对结果产生重大影响，其中包括<code>id_rsa</code>文件的读写权限，权限应该是越低越安全，但又会导致ssh无法使用该key进行验证。而有时明明用<code>ssh -vT git@github.com</code>连接成功，却仍然提示<a href="https://docs.github.com/cn/free-pro-team@latest/github/authenticating-to-github/error-permission-denied-publickey"><code>Error: Permission denied (publickey)</code></a>，时灵时不灵又不知问题出在哪，实在叫人疑惑。</p><p><a href="https://www.awaimai.com/2200.html">附上一篇参考文章</a>，虽仍不能解决我的问题，但已经是较为全面的了</p><h3 id="linux电源管理"><a class="markdownIt-Anchor" href="#linux电源管理"></a> Linux电源管理</h3><p>合盖的不同设定：</p><ul><li>poweroff和halt均是关机（具体实现有区别）</li><li>hybernate是休眠，设备断电（同关机状态），内容保存在硬盘中</li><li>hybrid-sleep是混合睡眠，设备通电，内容保存在硬盘和内存中</li><li>supspend(或sleep)是挂起（睡眠），设备通电，内容保存在内存中</li><li>lock是锁屏</li><li>kexec是从当前正在运行的内核直接引导到一个新内核（多用于升级了内核的情况下）</li><li>ignore是忽略该动作，即不进行任何电源事件响应</li></ul><h3 id="问题记录"><a class="markdownIt-Anchor" href="#问题记录"></a> 问题记录</h3><ol><li><p>kde桌面崩溃</p><pre><code class="hljs bash">kquitapp5 plasmashellkstart5 plasmashell</code></pre></li><li><p>触摸板突然失灵</p><p>先卸载模块<code>sudo modprobe -r psmouse(或i2c_hid)</code></p><p>再装上模块</p><p>刷新系统服务<code>sudo systemctl daemon-reload</code></p><p>再次休眠唤醒</p></li><li><p>VMWare报错</p><p>先检查是否装对应kernel版本的linux-headers</p><p>每次开机后再输<code>sudo modprobe -a vmw_vmci vmmon</code></p><p>上述命令亦无效则是kernel版本太新尚无module可用，参见<a href="https://communities.vmware.com/thread/638824">此贴</a>中的步骤，下载<a href="https://github.com/mkubecek/vmware-host-modules">该仓库</a>中对应版本执行<code>make</code>即可编译完成</p><p>vmnet8报错无法联网：<code>sudo systemctl start vmware-networks.service</code></p></li><li><p>挂载NTFS分区</p><p><code>sudo mount -t ntfs-3g /dev/nvme0n1p4 /path/to/mount</code></p><p>该命令仅限一次开机，永久生效需编辑<code>/etc/fstab</code></p></li><li><p>中文字体选择</p><p><a href="https://feeshy.github.io/tech/web_safe_fonts.html">常用Web字体</a></p><p><a href="http://tool.pfan.cn/font">网页字体测试</a></p><p><a href="http://edyfox.codecarver.org/html/debian_testing_chinese.html">KDE中文字体美化</a></p></li></ol>]]></content>
    
    
    <categories>
      
      <category>记录</category>
      
    </categories>
    
    
    <tags>
      
      <tag>环境配置</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>(译)因循的四象限</title>
    <link href="/2020/10/28/The-Four-Quadrants-of-Conformism/"/>
    <url>/2020/10/28/The-Four-Quadrants-of-Conformism/</url>
    
    <content type="html"><![CDATA[<h3 id="因循的四象限"><a class="markdownIt-Anchor" href="#因循的四象限"></a> 因循的四象限</h3><p><a href="http://www.paulgraham.com/conformism.html">原文:The Four Quadrants of Conformism</a></p><p>Author : Paul Gramham</p><p>2020.7</p><p>给人分类最好的标准之一便是其因循程度和积极性。想象一个平面坐标系，横轴从左到右分别是循规蹈矩的人和独立思考的人，竖轴自底向上是消极温顺的人和积极好斗的人。结果分成四个象限各代表四种人。从左上方开始逆时针旋转，依次是积极守旧型、消极守旧型、消极独立型、积极独立型。</p><p>我认为这四种类型的人在大多数社会都能找到，而一个人被归类入那种象限更多取决于自身的个性而不是社会的流行价值观。[1]</p><p>从儿童中能够找到支持以上两点的绝佳证据。在小学里这四种类型的人都很常见，而学校的规章制度却千篇一律地专制，这无疑表明人能成为何种类型取决于他们自己，而不是由规矩所决定。</p><p>左上方(第二象限)的孩子是积极守旧型，那些向老师告密的红卫兵。他们相信规矩必须被严格遵守，不守规矩的人必须受到惩罚。</p><p>左下方(第三象限)的孩子是消极守旧型，那些温顺如绵羊的老好人。他们小心谨慎、循规蹈矩，但当其他孩子破坏规矩的时候,他们的第一反应是为其可能被罚而担忧，而不是想方设法让他们受罚。</p><p>右上方(第一象限)的孩子是消极独立型，那些心不在焉的游离派。他们对规矩不甚关心，可能连规矩的内容都不太清楚。</p><p>右下方(第四象限)的孩子是积极独立型，那些最淘气的刺头儿。他们看到规矩的第一反应就是质疑之，被吩咐去做某事时，他们往往会和要求对着干。</p><p>当然，在衡量因循程度时，你必须谈及规矩所关系到的对象，而这随着孩子的成长而变化。对于十分幼小的孩子来说，规矩由成人制定。但当孩子长大些，他们的同龄人则成为了规矩的来源。所以一帮少年对学校规则尽可以表示轻蔑，却同样不是独立思考的结果，反而是从众的表现。</p><p>正如我们可以通过叫声分辨鸟的种类，成年人也可以通过言语辨认四种类型的儿童。红卫兵喊叫着“打倒反对派！”，老好人说“邻居们会怎么想？”，游离派声称“各有所好”，刺头儿高呼“但是它的确在动”(原文:<em>Eppur si muove</em>)。</p><p>这四种类型的人并不同样多。消极型的人比积极型的人更多，循规蹈矩者更是远多于独立思考者。所以老好人是最大的一类群体，而刺头儿则最少。</p><p>一个人属于哪种象限更多取决于自身的个性而不是被规矩的类型所限，大多数人就算在完全不同的社会成长仍然会成为和原来属于相同象限的人。</p><p>普利斯顿大学的教授罗伯特·乔治最近写道：</p><blockquote><p>我有时侯会问学生：如果他们是生活在废奴前的南方白人，他们在奴隶制上的的立场会是如何？你猜他们怎么说？他们依然会成为废奴主义者！他们依然会勇敢地声讨奴隶制并不遗余力地与之作斗争。</p></blockquote><p>教授该是出于礼貌而言止于此，但是学生们在那样的情况下肯定不会坚持成为废奴主义者。实际上，我不惮以最坏的恶意揣测这些学生，他们不仅总体上会表现得和当时的人一样，现在他们之中规矩的积极捍卫者在当时也会是红卫兵式的人物。换句话说，他们不仅不会去反对奴隶制，还会成为奴隶制最坚定的维护者。</p><p>我承认自己怀有偏见，但在我看来那一撮积极守旧型的人对世界上的混乱负有极大的责任，自启蒙运动以来我们演化出的很多措施就是用来保护剩下的人免受侵犯。其中尤为重要的是，“异端”这一概念逐渐淡化，取而代之的是各种不同观点自由辩论的原则，就算有些观点目前还不被认可，尝试践行者也不会受到任何惩罚。[2]</p><p>不过，为什么独立思想者需要被保护呢？因为他们拥有所有的新想法。比如，想当一个成功的科学家，仅仅做到正确是不够的。你必须在其他人都错误的时候保持正确，而循规蹈矩的人是做不到的。类似地，所有成功的创业CEO都不仅拥有主见，还积极伸张。所以社会的繁荣和其拥有限制积极守旧型的措施密切相关，这并非偶然。[3]</p><p>近几年来，我们很多人都注意到那些保护自由探索的措施正在被动摇。有些人说我们是过度反应———因为那些措施并没有被削弱很多，或者是为了更重大的利益让步。我们现在就来处理第二种看法。每当守旧派占上风，他们总是宣称为了更大的利益，只是碰巧每次都是出于一种不同的、不可相容的重大利益。</p><p>至于前一种观点，也就是认为独立思想者敏感过度，自由探索的大门并没有被关得那么严，我想说的是，除非你自己是个有主见的人，否则你无法对此做出判断。除非你自己拥有观念的水位，否则你无法知道它是否正在干涸。而只有独立思想者拥有最先锋的看法，也正因此，他们思想领域探索自由度的变化非常敏感，他们就是煤矿中的金丝雀(译者注:<em>the canaries in this coalmine</em>)。</p><p>守旧者总是宣称他们不想阻塞所有言路，而只是针对坏主意。</p><p>你可能会觉得字里行间其排除异己之心昭然若揭。但我还是要讲清楚为什么我们需要讨论那些“坏主意”，这有两条原因。</p><p>其一，任何决定哪种意见会被禁止的过程都一定会出错。因为没有聪明人想承担这种任务，所以最终这种决定都会由蠢人做出。而当一个过程导致了很多错误，就需要留出误差幅度，也就是减少所禁止的意见数。但积极守旧者很难做到这点，因为他们从小就乐于看到别人受罚，又喜欢互相竞争。正统派的执行者不能容许中间意见的存在，这会给其他执行者以机会在道德纯洁度上占上风，甚至可能会让他们掉转头来攻击自己。所以我们不但不会留出原本所需的误差幅度，反而会出现竞次，最终让所有貌似异端的观点都被禁止。[4]</p><p>其二，观点之间的联系要比看上去紧密得多。如果你限制某些话题的讨论，受到影响的不止是那些话题，限制会传播至任何牵涉到被禁内容的话题，而这并非极端案例。最好的观点往往会在远离起源的领域产生后果。在一个意见会被部分地禁止的世界中拥有想法就像在角落里有雷区的球场上踢足球一样，你会感到球场变了样，不再能踢球如常，就算在安全的地面上也踢得极为压抑。</p><p>过去，独立思想者保护自己的方式是在少数几个地方聚集——最初是在法庭,后来是在大学——在这里他们一定程度上能制定自己的规则。这些可以让人带着想法工作的场所往往拥有保护自由探索的措施，正如晶圆厂拥有强力的空气过滤器，录音棚具有良好的隔音效果。至少在过去几个世纪里，当积极守旧者由于各种原因得以横行霸道的时候，大学是最安全的地方。</p><p>然而不凑巧的是，这一回躲进大学可能不再管用，因为最新一波不宽容的浪潮开始在大学兴起，这股浪潮始于20世纪80年代中期，到2000年似乎已经退去，但就在最近，随着社交媒体的到来，它又死灰复燃了。不幸的是，这似乎是硅谷在自摆乌龙。尽管硅谷的管理者几乎都是独立思想者，但他们给了积极守旧者一个他们做梦都想不到的工具。</p><p>另一方面，也许大学内部自由探究精神的衰退，既是独立思想离开的征兆，也是其原因。50年前本可成为教授的人现在有了其他选择。现在，他们可以成为定量分析师或开创公司。你必须有独立的思想才能在这两方面取得成功。如果这些人成为教授，他们会为了学术自由而进行更严厉的抵抗。因此，也许现在想象独立思想者逃离日渐衰败的大学这一景象会显得过于悲观。大学的衰退，也许正因为很多独立思想者已经离开。</p><p>虽然我花了很多时间思考这种情况，但我无法预测结果如何。会有大学成功扭转当前的趋势，继续保持自己作为独立思想者想要聚集的地方吗？亦或独立思想者会逐渐抛弃大学？我很担心，如果真的走到那一步我们会失去什么。</p><p>但是我对长远的未来抱有希望。独立思考者善于保护自己。如果现存的制度陷入危险，他们会创造新的制度。这需要一定的想象力，但毕竟想象力正是他们的专长。</p><p>作者注：</p><p>[1] 我当然意识到，如果人们的性格在任意两个方面有所不同，你就能以之为坐标轴，把划分出的四个象限称为人格类型。所以我真正要说的是此处这两条轴是正交的，两者有很大的差异</p><p>[2] 积极保守者并不为世界上所有的麻烦负责。麻烦的另一大来源是那种魅力超凡的领导人，他们通过吸引积极保守者而获得权力。当这样的领导人出现时，积极保守型变得更加危险。</p><p>[3] 当我运营Y Combinator时，我从不担心写一些冒犯积极守旧者的东西。如果YC是一家饼干公司，我会面临一个艰难的道德选择。积极守旧者也吃饼干。但他们并没有成功创业。所以，如果我阻止他们申请YC，唯一的影响就是节省我们阅读申请表的工作量。</p><p>[4] 在一个领域已经取得了进步：对谈论被禁思想的惩罚不如过去严厉。被杀的危险很小，至少在较富裕的国家是如此。积极守旧者大多满足于让人被炒鱿鱼。</p><p>[5] 许多教授都有独立的思想，尤其是在数学、硬科学和工程学方面，在这些领域必须靠独立思想取得成功。但学生更能代表普通民众，因此大多是传统思维。所以，当教授和学生之间发生冲突时，这不仅是代际之间的冲突，还是不同类型的人之间的冲突。</p>]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>翻译</tag>
      
      <tag>随笔</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
