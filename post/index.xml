<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on chinggg的博客</title><link>https://chinggg.github.io/post/</link><description>Recent content in Posts on chinggg的博客</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Tue, 08 Feb 2022 13:46:52 +0000</lastBuildDate><atom:link href="https://chinggg.github.io/post/index.xml" rel="self" type="application/rss+xml"/><item><title>RAZOR</title><link>https://chinggg.github.io/post/razor/</link><pubDate>Tue, 08 Feb 2022 13:46:52 +0000</pubDate><guid>https://chinggg.github.io/post/razor/</guid><description>RAZOR: software debloating 论文信息 原文作者：Chenxiong Qian, Hong Hu, Mansour Alharthi, Pak Ho Chung, Taesoo Kim, and Wenke Lee, Georgia Institute of Technology 原文标题：RAZOR: A Framework for Post-deployment Software Debloating 发表会议：USENIX SECURITY &amp;lsquo;19 原文</description></item><item><title>gRPC Protobuf 逆向初探</title><link>https://chinggg.github.io/post/grpc-protobuf/</link><pubDate>Tue, 25 Jan 2022 11:30:09 +0800</pubDate><guid>https://chinggg.github.io/post/grpc-protobuf/</guid><description>逆向时开始见到 gRPC 协议和 Protobuf 编码在私信、直播等领域使用，故记录之。 gRPC 是基于 HTTP/2.0 来传输的，但 Fiddler 5 似乎尚不支持，在抓包某 App 时发现了神奇的现象，同样的功</description></item><item><title>vps2arch NVIDIA vGPU</title><link>https://chinggg.github.io/post/vps2arch-nvidia/</link><pubDate>Mon, 17 Jan 2022 15:03:15 +0800</pubDate><guid>https://chinggg.github.io/post/vps2arch-nvidia/</guid><description>vps2arch 没啥好说的，上不了网注意改 systemd-networkd 的配置，提前 pacman -S vi vim base-devel NVIDIA nvidia 和 nvidia-lts 都是最新版 nvidia 驱动，一般内核新不是问题，往往是驱动太新，执行 nvidia-smi 后提示无法与 driv</description></item><item><title>LDP IoV</title><link>https://chinggg.github.io/post/ldp-iov/</link><pubDate>Thu, 13 Jan 2022 21:20:48 +0800</pubDate><guid>https://chinggg.github.io/post/ldp-iov/</guid><description>A survey of local differential privacy for securing internet of vehicles Intro IoV facilitates human’s life but benefits come with huge price of data privacy. In academia, differential privacy (DP) is proposed and regarded as an extremely strong privacy standard, which formalizes both the degree of privacy preservation and data utility. But DP suffers from a drawback in many practical scenarios because the paradigm</description></item><item><title>SEEDLab Network</title><link>https://chinggg.github.io/post/seed-network/</link><pubDate>Fri, 07 Jan 2022 20:57:24 +0800</pubDate><guid>https://chinggg.github.io/post/seed-network/</guid><description>&lt;h1 id="seed-labs-20---network-securityhttpsseedsecuritylabsorglabs_2004networking">&lt;a href="https://seedsecuritylabs.org/Labs_20.04/Networking/" target="_blank">SEED Labs 2.0 - Network Security&lt;/a>&lt;/h1>
&lt;h2 id="firewallhttpsseedsecuritylabsorglabs_2004filesfirewallfirewallpdf">&lt;a href="https://seedsecuritylabs.org/Labs_20.04/Files/Firewall/Firewall.pdf" target="_blank">Firewall&lt;/a>&lt;/h2>
&lt;h3 id="使用-netfilter-自制防火墙-lkm">使用 NetFilter 自制防火墙 LKM&lt;/h3>
&lt;p>Netfilter 是 Linux 内核中一个用于管理网络数据包的软件框架，可以使用它自制 Linux Kernel Module，实现简易的防火墙。&lt;/p>
&lt;p>Task1 只是练习如何编译内核模块，即在 &lt;code>module_init(fn)&lt;/code>, &lt;code>module_exit(fn)&lt;/code> 处初始化及退出。&lt;/p>
&lt;p>使用 Netfilter 搭建防火墙的步骤：&lt;/p>
&lt;ul>
&lt;li>定义 nf_hook_ops 结构体，给 hook(hook函数) 和 hooknum(hook点类型) 赋值&lt;/li>
&lt;/ul>
&lt;pre>&lt;code class="language-c">struct nf_hook_ops {
/* User fills in from here down. */
nf_hookfn *hook;
struct net_device *dev;
void *priv;
u8 pf;
enum nf_hook_ops_type hook_ops_type:8;
unsigned int hooknum;
/* Hooks are ordered in ascending priority. */
int priority;
};
&lt;/code>&lt;/pre>
&lt;ul>
&lt;li>
&lt;p>模块加载时 &lt;code>nf_register_net_hook(&amp;amp;init_net, &amp;amp;hook1)&lt;/code>，卸载时 &lt;code>nf_unregister_net_hook(&amp;amp;init_net, &amp;amp;hook1)&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>nf_hookfn&lt;/code> 函数签名如下，实验中只需 &lt;code>ip_hdr(skb)&lt;/code> 获得 iphdr 结构体（类似有 tcphdr/udphdr），再从 iph 获得协议类型、源/目标地址，从 tcph/udph 获得端口号，比较决定是否 DROP 即可。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;pre>&lt;code class="language-c">typedef unsigned int nf_hookfn(void *priv,
struct sk_buff *skb,
const struct nf_hook_state *state);
&lt;/code>&lt;/pre>
&lt;ul>
&lt;li>注意每个结构体只能赋值一个 &lt;code>hooknum&lt;/code>，想在多个点上 hook 需定义多个 &lt;code>nf_hook_ops&lt;/code>，分别设置不同的 hooknum，枚举类型如下：&lt;/li>
&lt;/ul>
&lt;pre>&lt;code class="language-c">enum nf_inet_hooks {
NF_INET_PRE_ROUTING,
NF_INET_LOCAL_IN,
NF_INET_FORWARD,
NF_INET_LOCAL_OUT,
NF_INET_POST_ROUTING,
NF_INET_NUMHOOKS,
NF_INET_INGRESS = NF_INET_NUMHOOKS,
};
&lt;/code>&lt;/pre>
&lt;h3 id="使用-iptables">使用 iptables&lt;/h3>
&lt;p>基本命令 &lt;code>iptables -A {chain} -j {rule}&lt;/code>，&lt;code>-i/o {dev}&lt;/code> 指定入/出接口，&lt;code>-s/d&lt;/code> 指定源/目标地址，&lt;code>-sport/dport&lt;/code> 指定源/目标端口&lt;/p>
&lt;p>对于 TCP 连接，使用 &lt;code>conntrack&lt;/code> 模块搭建有状态防火墙，只允许已经建立的 TCP 连接和内部发起新连接&lt;/p>
&lt;p>限流使用 &lt;code>limit&lt;/code> 模块，&lt;code>--limit&lt;/code> 指定设置最大频率（即如10次/分钟），&lt;code>--limit-burst&lt;/code> 指定最大连续次数&lt;/p>
&lt;p>负载均衡使用 &lt;code>statistic&lt;/code> 模块，&lt;code>--mode&lt;/code> 指定模式为 &lt;code>random&lt;/code> 或 &lt;code>nth&lt;/code>，&lt;code>random&lt;/code> 模式下 &lt;code>--probability&lt;/code> 指定概率，&lt;code>nth&lt;/code> 模式下 &lt;code>--every n&lt;/code> 指定轮转周期，&lt;code>--packet p&lt;/code> 指定初始计数值（即从[0,n-1]中某处开始计数），一般配合 &lt;code>-j DNAT --to-destination {ip:port}&lt;/code> 使用&lt;/p>
&lt;h2 id="vpn_tunnelhttpsseedsecuritylabsorglabs_2004filesvpn_tunnelvpn_tunnelpdf">&lt;a href="https://seedsecuritylabs.org/Labs_20.04/Files/VPN_Tunnel/VPN_Tunnel.pdf" target="_blank">VPN_Tunnel&lt;/a>&lt;/h2>
&lt;p>实验基于 &lt;a href="https://www.kernel.org/doc/html/latest/networking/tuntap.html" target="_blank">TUN/TAP&lt;/a> 技术，TUN 模拟网络层设备，TAP 模拟数据链路层设备，用户程序和操作系统可以通过 TUN/TAP 接口互相传递数据包。&lt;/p>
&lt;pre>&lt;code>Client Program send(ip) -&amp;gt;
Client TUN read(ip) -&amp;gt;
Client Socket send(udp/ip) -&amp;gt;
Server Socket recv(udp/ip) -&amp;gt;
Server TUN write(ip) -&amp;gt;
...
route to dst then got reply routed back
...
Server TUN read(ip) -&amp;gt;
Server Socket send(udp/ip) -&amp;gt;
Client Socket recv(udp/ip) -&amp;gt;
Client TUN write(ip) -&amp;gt;
Client Program recv(ip)
&lt;/code>&lt;/pre>
&lt;h2 id="参考文献">参考文献&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://arthurchiao.art/blog/deep-dive-into-iptables-and-netfilter-arch-zh/">https://arthurchiao.art/blog/deep-dive-into-iptables-and-netfilter-arch-zh/&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>验证码实战</title><link>https://chinggg.github.io/post/captcha/</link><pubDate>Fri, 24 Dec 2021 16:27:26 +0800</pubDate><guid>https://chinggg.github.io/post/captcha/</guid><description>&lt;h3 id="小试牛刀">小试牛刀&lt;/h3>
&lt;p>先尝试模拟，使用 &lt;a href="https://juejin.cn/post/6956800708389634079" target="_blank">puppteer&lt;/a> 稍加计算就能成功绕过极验&lt;/p>
&lt;p>请求依次为&lt;/p>
&lt;ul>
&lt;li>POST &lt;a href="https://passport.bilibili.com/x/passport-login/sms/send">https://passport.bilibili.com/x/passport-login/sms/send&lt;/a> 设备信息为 body，返回 recaptcha_url 随即向其发起请求，注意该 url 中的 gt 和 challenge 将用于后续一系列请求&lt;/li>
&lt;li>GET &lt;a href="https://www.bilibili.com/h5/project-msg-auth/verify?ct=geetest&amp;amp;recaptcha_token=&amp;amp;gee_gt=&amp;amp;gee_challenge=&amp;amp;hash=">https://www.bilibili.com/h5/project-msg-auth/verify?ct=geetest&amp;amp;recaptcha_token=&amp;amp;gee_gt=&amp;amp;gee_challenge=&amp;amp;hash=&lt;/a> 即向之前获得的 recaptcha_url 发送 GET 请求跳转到页面&lt;/li>
&lt;li>GET &lt;a href="https://api.geetest.com/gettype.php?gt=&amp;amp;callback=geetest_%7B13%E4%BD%8D%E6%AF%AB%E7%A7%92%E6%97%B6%E9%97%B4%E6%88%B3%7D">https://api.geetest.com/gettype.php?gt=&amp;amp;callback=geetest_{13位毫秒时间戳}&lt;/a> 返回一些配置参数如静态js文件的位置（即相对路径）&lt;/li>
&lt;li>GET &lt;a href="https://api.geetest.com/get.php?gt=&amp;amp;challenge=&amp;amp;lang=zh-cn&amp;amp;pt=3&amp;amp;client_type=web_mobile&amp;amp;w=%7B%E4%B8%80%E9%95%BF%E4%B8%B2%7D&amp;amp;callback=">https://api.geetest.com/get.php?gt=&amp;amp;challenge=&amp;amp;lang=zh-cn&amp;amp;pt=3&amp;amp;client_type=web_mobile&amp;amp;w={一长串}&amp;amp;callback=&lt;/a> 仍然返回一些配置如验证开始前显示的i18n字符串&lt;/li>
&lt;li>GET &lt;a href="https://api.geetest.com/ajax.php?gt=&amp;amp;challenge=&amp;amp;lang=zh-cn&amp;amp;pt=3&amp;amp;client_type=web_mobile&amp;amp;w=&amp;amp;callback=">https://api.geetest.com/ajax.php?gt=&amp;amp;challenge=&amp;amp;lang=zh-cn&amp;amp;pt=3&amp;amp;client_type=web_mobile&amp;amp;w=&amp;amp;callback=&lt;/a> 第一次请求 ajax.php，返回 &lt;code>callback值({&amp;quot;status&amp;quot;: &amp;quot;success&amp;quot;, &amp;quot;data&amp;quot;: {&amp;quot;result&amp;quot;: &amp;quot;slide&amp;quot;}})&lt;/code>&lt;/li>
&lt;li>GET &lt;a href="https://api.geetest.com/get.php">https://api.geetest.com/get.php&lt;/a> 此时刚加载了 slide.js，和第一次请求 get.php 相比多了一些 params 如 &lt;code>is_next=true&amp;amp;type=slide3&lt;/code>，返回结果中有滑块验证时会显示的i18n字符串，以及&lt;strong>滑块和图片的位置&lt;/strong>&lt;/li>
&lt;li>GET &lt;a href="https://api.geetest.com/ajax.php?gt=&amp;amp;challenge=&amp;amp;lang=zh-cn&amp;amp;%24_BBF=3&amp;amp;client_type=web_mobile&amp;amp;w=&amp;amp;callback=">https://api.geetest.com/ajax.php?gt=&amp;amp;challenge=&amp;amp;lang=zh-cn&amp;amp;%24_BBF=3&amp;amp;client_type=web_mobile&amp;amp;w=&amp;amp;callback=&lt;/a> 最终的请求，返回 success 及 score&lt;/li>
&lt;/ul>
&lt;h3 id="工程化探索">工程化探索&lt;/h3>
&lt;p>将验证码填充作为通用服务运行，让爬虫客户端无感绕过验证码，考虑在客户端和服务端（比如 puppeteer）之间使用 RPC，客户端先调起服务端，服务端进入验证码流程，但将所有请求拦截并通过 RPC 传递给客户端，客户端代为请求，响应结果作为 RPC 的返回值，服务端再强行将其作为响应，继续之后的动作，从而在验证方看来客户端正常完成了验证。&lt;/p>
&lt;p>真正开发过程中，很多时间浪费在了数据类型造成的错误中，在 proto 中我把除状态码外的所有字段定为 string，但用 axios 等库发起请求时，header 为 object，且若不在请求时指定 responseType，所获响应默认用 json 解析成 object，否则才是 text。更坑的是图片等二进制数据，获得为文本时已经铸成大错，需要先指定 responseType 为 &lt;code>arraybuffer&lt;/code>（在 Node 中 &lt;code>blob&lt;/code> 实际还是以文本返回，因为 &lt;code>blob&lt;/code> 是 browser only），然后 &lt;code>res.data.toString('base64')&lt;/code> 转成 base64 字符串通过 RPC 传递，接收方再 &lt;code>Buffer.from(str, 'base64')&lt;/code> 来转成 buffer。&lt;/p>
&lt;p>&lt;a href="https://juejin.cn/post/6844904182114189320" target="_blank">JS逆向：AST还原极验混淆JS实战&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://github.com/virjar/geeEtacsufbo" target="_blank">反符号混淆和控制流平坦化&lt;/a>&lt;/p></description></item><item><title>AppRE</title><link>https://chinggg.github.io/post/appre/</link><pubDate>Tue, 30 Nov 2021 14:36:28 +0800</pubDate><guid>https://chinggg.github.io/post/appre/</guid><description>App 逆向基础 国产应用大多热衷于构筑自己的 App 围墙，很多功能没有网页版，也就无法利用浏览器一探究竟，不过我们仍然可以通过抓包、静态分析、动态调试的</description></item><item><title>Btrfs 踩坑记录</title><link>https://chinggg.github.io/post/btrfs/</link><pubDate>Sun, 28 Nov 2021 20:50:22 +0800</pubDate><guid>https://chinggg.github.io/post/btrfs/</guid><description>&lt;p>用上 Btrfs 不到两个月，还没怎么享受透明压缩和增量快照带来的好处，却已为它熬过几个艰难的夜晚&lt;/p>
&lt;p>先是 WinBtrfs 的问题，&lt;code>btrfs check --repair&lt;/code> 幸运地修回来，果断注册表里改成只读&lt;/p>
&lt;p>但之后在 Arch 中作死用 VMWare 从物理磁盘启动自身，却造成了毁灭性后果，整个系统突然变为 ro，重启后果然 transid error 无法进入&lt;/p>
&lt;p>老规矩先抢救数据， restore 到 ext4 格式的移动硬盘（exFAT 真没用）&lt;/p>
&lt;p>这次虽然 transid 只差了 1，但 check 后发现问题比上次更为严重，&lt;code>check -b&lt;/code>, &lt;code>check -s 1&lt;/code> 结果都不妙&lt;/p>
&lt;p>记下 &lt;code>btrfs-find-root&lt;/code> 的结果以备之后 repair&lt;/p>
&lt;p>但可惜 repair 也无能为力，可能还让事情更糟了，试了 &lt;code>rescue zero-log&lt;/code> 也没救回&lt;/p>
&lt;p>神奇的是进 Win 还能正常识别文件，也不知道是 repair 还是 rescue 让 btrfs 分区能直接挂载了&lt;/p>
&lt;p>现在问题变成了 EIO，理论上是盘坏了但它肯定没坏，数据都还能读但无法恢复正常&lt;/p>
&lt;p>没办法，趁还可以挂载 btrfs 分区，&lt;code>rsync -aviHAXKhP&lt;/code> 再备份一遍到移动硬盘（注意 exclude 快照和无用大目录，否则等一晚上）&lt;/p>
&lt;p>把 btrfs 分区格了再从移动硬盘拖回去，子卷化，改 fstab，重做 grub 引导，终于进入了熟悉的 Arch&lt;/p>
&lt;p>然而用户配置等方面还是有问题，可能第二回的备份不全，把之前备份的配置覆盖回去。pacman 还有数据不一致问题，overwrite 解决&lt;/p></description></item><item><title>Android Hook</title><link>https://chinggg.github.io/post/android-hook/</link><pubDate>Wed, 17 Nov 2021 16:38:08 +0800</pubDate><guid>https://chinggg.github.io/post/android-hook/</guid><description>Frida 万金油动态调试工具，配合自己收集定制的 hook 模板代码，稍作修改就可以快速查看 Java 层的类及其方法成员信息和 Native 层函数的参数与返回值，便于验证自己的想</description></item><item><title>FART</title><link>https://chinggg.github.io/post/fart/</link><pubDate>Fri, 05 Nov 2021 23:04:43 +0800</pubDate><guid>https://chinggg.github.io/post/fart/</guid><description>安卓脱壳 FART 速成 环境准备 Pixel 3a XL 一台，代号 bonito，先恢复出厂系统 ，再准备相应源码， android-9.0.0_r47 对应 版本号 PQ3B.190801.002 对应，android-10.0.0_r2 对</description></item><item><title>在 Docker 中运行 Linux 性能分析工具 perf</title><link>https://chinggg.github.io/post/docker-perf/</link><pubDate>Thu, 09 Sep 2021 15:46:57 +0000</pubDate><guid>https://chinggg.github.io/post/docker-perf/</guid><description>perf 简介 性能调优基本原理 在了解具体的工具之前，我们首先应该问自己，性能分析要追踪和优化什么。我们都知道程序的运行会占用包括 CPU，内存，文件描</description></item><item><title>ML-Leaks</title><link>https://chinggg.github.io/post/ml-leaks/</link><pubDate>Sat, 22 May 2021 13:46:52 +0000</pubDate><guid>https://chinggg.github.io/post/ml-leaks/</guid><description>NDSS 2019 研究成果概括 ML-Leaks 前言 本文将对 NDSS (Network and Distributed System Security Symposium) 2019 获奖论文 ML-Leaks: Model and Data Independent Membership Inference Attacks and Defenses on Machine Learning Models 进行解读。这篇论文的主要研究内容是针对机器学习模型的成员推</description></item><item><title>Server-Hacked</title><link>https://chinggg.github.io/post/server-hacked/</link><pubDate>Sun, 21 Feb 2021 14:29:33 +0000</pubDate><guid>https://chinggg.github.io/post/server-hacked/</guid><description>└─# lsof -c uBXOvYBM COMMAND PID USER FD TYPE DEVICE SIZE/OFF NODE NAME uBXOvYBM 318196 root cwd DIR 254,1 4096 2 / uBXOvYBM 318196 root rtd DIR 254,1 4096 2 / uBXOvYBM 318196 root txt REG 254,1 819252 1048698 /root/08db56cb75fd057be28be1007c5f4424 (deleted) uBXOvYBM 318196 root DEL REG 0,14 127380184 /anon_hugepage uBXOvYBM 318196 root DEL REG 0,14 17030308 /anon_hugepage uBXOvYBM 318196 root DEL REG 0,14 17030306 /anon_hugepage uBXOvYBM 318196 root</description></item><item><title>自杀研究：读书报告与案例分析</title><link>https://chinggg.github.io/post/suicide/</link><pubDate>Wed, 30 Dec 2020 00:30:02 +0000</pubDate><guid>https://chinggg.github.io/post/suicide/</guid><description>《自杀论》读书报告——自杀与晚期资本主义社会 说到自杀，人们往往把它当成一种心理现象看待，尝试分析自杀者的精神状态和个人经历，从中寻找其自杀的</description></item><item><title>Setup</title><link>https://chinggg.github.io/post/setup/</link><pubDate>Wed, 28 Oct 2020 04:45:41 +0000</pubDate><guid>https://chinggg.github.io/post/setup/</guid><description>Network For hardware stuff, see Wireless SSH Key-Auth ssh-keygen -t rsa host {shortName} Hostname {address} Port 22 User {username} IdentityFile {path/to/key} do not forget to set private key 600 Win10-OpenSSH-Server Install from Settings UI : Optional Features Install from PowerShell : Add-WindowsCapability -Online -Name OpenSSH.Server~~~~0.0.1.0 ===Start-Service Start-Service sshd # OPTIONAL but recommended: Set-Service -Name sshd -StartupType 'Automatic' # then back to local machine: ssh username@servername Win32-OpenSSH PS: Set-ExecutionPolicy RemoteSigned or</description></item><item><title>(译)因循的四象限</title><link>https://chinggg.github.io/post/the-four-quadrants-of-conformism/</link><pubDate>Wed, 28 Oct 2020 00:29:00 +0000</pubDate><guid>https://chinggg.github.io/post/the-four-quadrants-of-conformism/</guid><description>因循的四象限 原文:The Four Quadrants of Conformism Author : Paul Gramham July 2020 给人分类最好的标准之一便是其因循程度和积极性。想象一个平面坐标系，横轴从左到右分别是循规蹈矩的人</description></item></channel></rss>