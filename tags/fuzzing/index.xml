<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Fuzzing on chinggg的博客</title><link>https://chinggg.github.io/tags/fuzzing/</link><description>Recent content in Fuzzing on chinggg的博客</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Sat, 08 Oct 2022 12:20:48 +0800</lastBuildDate><atom:link href="https://chinggg.github.io/tags/fuzzing/index.xml" rel="self" type="application/rss+xml"/><item><title>GSoC 2022 - Qiling Binary Emulation Meet R2 Static Analysis</title><link>https://chinggg.github.io/post/gsoc22-qiling/</link><pubDate>Sat, 08 Oct 2022 12:20:48 +0800</pubDate><guid>https://chinggg.github.io/post/gsoc22-qiling/</guid><description>Hello. I’m chinggg, a participant of GSoC 2022 with Qiling. For the past few months, I’ve been working on bridging Qiling with Radare2 (also known as r2) to enhance binary emulation with static analysis.
Motivation As a binary emulation framework, Qiling has done a nice job in emulation. But Qiling has limited ability to analyze binaries, users have to rely on other tools for useful information like function addresses then hardcode them, which is inconvenient.</description></item><item><title>Evocatio: Conjuring Bug Capabilities from a Single PoC</title><link>https://chinggg.github.io/post/evocatio/</link><pubDate>Mon, 26 Sep 2022 12:20:48 +0800</pubDate><guid>https://chinggg.github.io/post/evocatio/</guid><description>Fuzzing 等动态软件测试技术可以快速生成 PoC 测试用例来触发程序中的 bug，但当开发者获得了大量的 PoC 后，又该如何在人力有限的情况下快速地分析 bug 的严重性和</description></item><item><title>Fuzzing Evolution: How developers make Bitcoin more secure</title><link>https://chinggg.github.io/post/bitcoin-fuzz/</link><pubDate>Fri, 13 May 2022 21:20:48 +0800</pubDate><guid>https://chinggg.github.io/post/bitcoin-fuzz/</guid><description>Abstract Bitcoin is a widely used distributed system that is time-tested and recognized to be secure. However, most of the existing research focus on its theoretical security model, while ignoring the possible vulnerabilities in its software implementation. This paper will review how fuzzing, an increasingly popular automated vulnerability detection method, has been used in practice and refined stage by stage by Bitcoin Core developers. In addition, this paper will describe recent work published in ICSE 2022 that analyzes three different software testing techniques and summarizes their practical effects when applied to Bitcoin Core.</description></item><item><title>My Summer of Bitcoin 2022 Experience</title><link>https://chinggg.github.io/post/summer-of-bitcoin/</link><pubDate>Fri, 13 May 2022 21:20:48 +0800</pubDate><guid>https://chinggg.github.io/post/summer-of-bitcoin/</guid><description>What is Summer of Bitcoin?
a global, online summer internship program focused on introducing university students to bitcoin open-source development and design
When I started to write my proposal for it, there was only one week to go before the deadline. Luckily, my experience with OSS-Fuzz and my efforts paid off. I am proud to become one of the 83 students who will participate in Summer of Bitcoin 2022 and one of the 5 students to contribute to Bitcoin Core under the guidance of Marco Falke.</description></item></channel></rss>