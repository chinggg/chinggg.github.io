<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Android on chinggg的博客</title><link>https://chinggg.github.io/tags/android/</link><description>Recent content in Android on chinggg的博客</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Wed, 17 Nov 2021 16:38:08 +0800</lastBuildDate><atom:link href="https://chinggg.github.io/tags/android/index.xml" rel="self" type="application/rss+xml"/><item><title>Android Hook</title><link>https://chinggg.github.io/post/android-hook/</link><pubDate>Wed, 17 Nov 2021 16:38:08 +0800</pubDate><guid>https://chinggg.github.io/post/android-hook/</guid><description>&lt;h3 id="frida">Frida&lt;/h3>
&lt;p>万金油动态调试工具，配合自己收集定制的 hook 模板代码，稍作修改就可以快速查看 Java 层的类及其方法成员信息和 Native 层函数的参数与返回值，便于验证自己的想法，但实际上手可能还会遇到不少坑点令人苦恼：&lt;/p>
&lt;ul>
&lt;li>Java/Native 层数据结构映射到 JS 这种动态语言，可能需要 cast 或者自己转换成 JS 中的类型&lt;/li>
&lt;li>Native 层通过 &lt;code>findExportByName&lt;/code> 获取函数不够准确，可能还要通过地址&lt;/li>
&lt;li>不应发生的 cannot access address &amp;hellip; 问题&lt;/li>
&lt;/ul>
&lt;p>&lt;a href="https://www.anquanke.com/post/id/195869">https://www.anquanke.com/post/id/195869&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://kevinspider.github.io/fridahookjava/">https://kevinspider.github.io/fridahookjava/&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://kevinspider.github.io/fridahookso/">https://kevinspider.github.io/fridahookso/&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://kevinspider.github.io/zhuabao/">https://kevinspider.github.io/zhuabao/&lt;/a>&lt;/p>
&lt;pre>&lt;code class="language-javascript">function map2obj(map) {
var res = {};
var keyset = map.keySet();
var it = keyset.iterator();
while (it.hasNext()) {
var keystr = it.next().toString();
var valuestr = map.get(keystr).toString();
res[keystr] = valuestr
}
return res;
}
function dfs(self, depth) {
if (depth &amp;gt; 6) return {}
const obj = {}
const cls = self.getClass()
const fields = cls.getDeclaredFields()
// console.log(&amp;quot;-&amp;quot;.repeat(depth), &amp;quot;dfs&amp;quot;, cls, self)
// console.log(&amp;quot;-&amp;quot;.repeat(depth), &amp;quot;fields:&amp;quot;, fields)
const immediates = ['short', 'int', 'long', 'float', 'double', 'boolean', 'String']
fields.forEach(x =&amp;gt; {
x.setAccessible(true)
const v = x.get(self)
if (v === null) return
const s = x.toString() // public type fullname
// const type = x.getType() // class java.lang.String
// const k = x.getName() // short name
// console.warn(x, v, k, type)
if (immediates.some(type =&amp;gt; s.includes(type))) {
obj[x] = v.toString()
} else { // inner class
obj[x] = dfs(v, depth+1)
}
})
return obj
}
function hookJava() {
if (Java.available) {
Java.perform(function () {
var cls = Java.classFactory.use(&amp;quot;com.package.classname&amp;quot;);
cls.methodName.implementation = function (a1, a2, a3, a4) {
console.log('&amp;gt;'.repeat(10), &amp;quot;hookJava begin&amp;quot;)
let a2str = JSON.stringify(map2obj(a2), null, 4)
console.log(a1, a3, a4)
console.warn(a2str)
var res = this.methodName(a1, a2, a3, a4)
console.warn('res:', res)
return res
console.log(&amp;quot;hookJava end&amp;quot;, '&amp;lt;'.repeat(10))
}
})
}
}
function hookNative() {
let m = Process.findModuleByName('lib.so')
let f = Module.findExportByName('lib.so', 'Functions_xx')
console.log(m.base, f)
// f = m.base.add(0xBDB8C)
Interceptor.attach(f, {
onEnter: function (args) {
console.warn(&amp;quot;args:&amp;quot;, args[1], args[1].readCString())
},
onLeave: function (ret) {
console.warn(&amp;quot;ret:&amp;quot;, ret, ret.readCString())
// this.context.r0 = 1
}
})
}
setImmediate(hookJava)
// setImmediate(hookNative)
&lt;/code>&lt;/pre></description></item><item><title>FART</title><link>https://chinggg.github.io/post/fart/</link><pubDate>Fri, 05 Nov 2021 23:04:43 +0800</pubDate><guid>https://chinggg.github.io/post/fart/</guid><description>安卓脱壳 FART 速成 环境准备 Pixel 3a XL 一台，代号 bonito，先恢复出厂系统 ，再准备相应源码， android-9.0.0_r47 对应 版本号 PQ3B.190801.002 对应，android-10.0.0_r2 对</description></item></channel></rss>