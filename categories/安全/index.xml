<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>安全 on chinggg的博客</title><link>https://chinggg.github.io/categories/%E5%AE%89%E5%85%A8/</link><description>Recent content in 安全 on chinggg的博客</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Tue, 30 Nov 2021 14:36:28 +0800</lastBuildDate><atom:link href="https://chinggg.github.io/categories/%E5%AE%89%E5%85%A8/index.xml" rel="self" type="application/rss+xml"/><item><title>AppRE</title><link>https://chinggg.github.io/post/appre/</link><pubDate>Tue, 30 Nov 2021 14:36:28 +0800</pubDate><guid>https://chinggg.github.io/post/appre/</guid><description>&lt;h2 id="app-逆向基础">App 逆向基础&lt;/h2>
&lt;p>国产应用大多热衷于构筑自己的 App 围墙，很多功能没有网页版，也就无法利用浏览器一探究竟，不过我们仍然可以通过抓包、静态分析、动态调试的方法解开隐藏在 App 中的秘密。&lt;/p>
&lt;p>抓包能让我们快速获得想要的 API，不过其门槛也在不断增高，Android 7.0 之后应用不再相信非系统证书，客户端应用也可能使用 SSL Pinning 等技术防止中间人的干扰，一般需要使用 Xpose 模块 JustTrustMe。&lt;/p>
&lt;p>抓包获得关键请求后，分析其字段的意义，并在静态分析工具中全局搜索，定位至相关函数，应用大多会将数据编码、加密或生成摘要，这些逻辑可能放在 native 层实现，增大了逆向的难度。&lt;/p>
&lt;p>所幸 frida 等工具的出现大大便利了动态调试，可以方便地 hook 得到 Java 层各个类及其成员、方法，对于 native 层，也可在获得函数的参数和返回值，快速验证逆向分析时的想法。若由于时机等原因难以 hook，还可直接将 so 库封装到自己创建的 app 中，在 &lt;code>build.gradle&lt;/code> 里添加 abiFilters 参数以指定 arm 指令集，手动复制关键类并 import，再在 MainActivity 里 loadLibrary，即可直接调用 native 层方法，调试并在断点之间 hook 更改 context 寄存器的值，查看变量的值。&lt;/p>
&lt;p>逆向得到加密数据、生成校验的算法后，便可以伪造合法的请求。编码上的细节需要多加考虑，抓包得到 params 或 body 中的参数大都是 urlencode 后的结果，但生成校验时的参数却可能是原始的字符串，构造请求时需要仔细考虑。排查错误时要冷静，关键位置往往是正确的，但完全没料到的地方可能出岔子，比如谁能想到 f-string 中嵌入 bytes 型的参数，生成的字符串里居然还带着引号，而且作为 body 发送居然看上去一模一样？&lt;/p>
&lt;pre>&lt;code class="language-python">bstr = b'feiwu'
fstr = f'woshi {bstr}'
print(fstr)
# woshi b'feiwu'
&lt;/code>&lt;/pre>
&lt;p>不能以脚本小子的心态写脚本，必须做好代码的类型标注，模块化编程，这样即使无法避免问题的发生，也能在问题出现时快速定位。排查问题时脑子注意转过弯来，如果加密算法中有随机值，先固定下来，在静态的层面上观察结果，与真实样本做对比。&lt;/p>
&lt;h2 id="实战案例复盘">实战案例复盘&lt;/h2>
&lt;p>&lt;a href="https://www.qinless.com/341" target="_blank">某品会 edata 参数(AES 加密)&lt;/a>&lt;/p>
&lt;p>仅有少量请求有 edata 参数，从一串 query params 型的键值对字符串，得到 AES 加密并 base64 编码后的 edata 结果，具体实现在 esNav 这个 native 函数中。&lt;/p>
&lt;p>首先静态分析，IDA 反编译后两百多行，一上来就从全局变量中获取了未知的字符串，然后放入不知所云的 &lt;code>gsigds&lt;/code> 函数中进行一通操作。此时盲目扎进细节中耗时耗力而且白费功夫，只需抓住 AES 加密的核心，无非是 key 和 iv，倒过来分析代码发现前者是 md5 后的值，后者是随机的16位 hex 字符串，生成 edata 的前十六位字符便是 iv，后面再拼接 AES 加密的结果，这样服务器获得发送过来的 edata 后即可对称解密，而 key 显然应该是每次固定的，所以只需 hook 生成 md5 的函数获得返回值，便能得到 key 进而实现加密算法。&lt;/p>
&lt;p>但在测试手机上发现该应用在运行时 hook 容易崩溃，只能以 spawn 的形式 hook， 而抓包发现 edata 的请求似乎只在初始化时发送，刚启动时 native 层中的关键函数又尚未被加载，很难有合适的时机 hook，这时就可以自制 App 直接调用 Java 层函数，在断点之间 hook 即可拿到 key。&lt;/p>
&lt;p>&lt;a href="https://www.qinless.com/139" target="_blank">某品会 api_sign 验证头(SHA1 摘要)&lt;/a>&lt;/p>
&lt;p>每一个请求头都会带上 &lt;code>Authorization: OAuth api_sign={}&lt;/code>，全局搜索定位到 native 函数 gsNav，是从 &lt;code>TreeMap&amp;lt;String, String&amp;gt;&lt;/code>(也就是 query params) 得到一串 SHA1 摘要。&lt;/p>
&lt;p>进 IDA 分析，发现仍然调用了 &lt;code>gsigds&lt;/code> 函数获取字符串，传入 &lt;code>getByteHash&lt;/code> 获得了32位的 hex 字符串作为盐，拼接在从 Map 转成的 query param 型字符串前进行 SHA1 摘要，再对结果再来一次加盐摘要即得 api_sign，实际上如果熟悉 SHA1 的话看到 api_sign 是长为40的 hex 应该就能想到。&lt;/p>
&lt;pre>&lt;code class="language-python">import base6
import hashlib
import json
import random
from urllib.parse import unquote, parse_qsl, urlencode
from Crypto.Cipher import AES
from Crypto.Util.Padding import pad
def gen_sign(paramstr: str) -&amp;gt; str:
&amp;quot;&amp;quot;&amp;quot;paramstr will unquoted automatically&amp;quot;&amp;quot;&amp;quot;
paramstr = unquote(paramstr).encode()
salt = b&amp;quot;da19a1b93059ff3609fc1ed2e04b0141&amp;quot; # True
salt = b&amp;quot;aee4c425dbb2288b80c71347cc37d04b&amp;quot; # False
h1 = hashlib.sha1(salt + paramstr)
cipher1 = h1.hexdigest().encode()
h2 = hashlib.sha1(salt + cipher1)
return h2.hexdigest()
def gen_edata(paramstr: str) -&amp;gt; str:
&amp;quot;&amp;quot;&amp;quot;paramstr: app_name=...&amp;amp;dinfo=...&amp;quot;&amp;quot;&amp;quot;
paramstr = paramstr.encode()
paramstr = pad(paramstr, 16)
key = bytearray.fromhex(&amp;quot;8c c7 03 f6 47 8e 58 f0 84 49 d5 c0 cf 2d d5 83&amp;quot;) # True
key = bytearray.fromhex(&amp;quot;cd d1 7a b2 9b 84 b3 25 52 dd cf bb 4a bf 02 25&amp;quot;) # False
key = bytes(key)
ran16b = ''.join(random.choices('0123456789abcdef', k=16)).encode()
cipher = AES.new(key, AES.MODE_CBC, iv=ran16b)
enctext = cipher.encrypt(paramstr)
ans = base64.b64encode(ran16b + enctext)
return ans.decode()
def dec_edata(b64s: str) -&amp;gt; str:
enctext = base64.b64decode(b64s.encode())
key = bytearray.fromhex(&amp;quot;8c c7 03 f6 47 8e 58 f0 84 49 d5 c0 cf 2d d5 83&amp;quot;) # True
key = bytearray.fromhex(&amp;quot;cd d1 7a b2 9b 84 b3 25 52 dd cf bb 4a bf 02 25&amp;quot;) # False
key = bytes(key)
iv = enctext[:16]
cipher = AES.new(key, AES.MODE_CBC, iv=iv)
raw = cipher.decrypt(enctext[16:])
try:
return raw.decode()
except:
return raw
&lt;/code>&lt;/pre></description></item><item><title>Android Hook</title><link>https://chinggg.github.io/post/android-hook/</link><pubDate>Wed, 17 Nov 2021 16:38:08 +0800</pubDate><guid>https://chinggg.github.io/post/android-hook/</guid><description>&lt;h3 id="frida">Frida&lt;/h3>
&lt;p>万金油动态调试工具，配合自己收集定制的 hook 模板代码，稍作修改就可以快速查看 Java 层的类及其方法成员信息和 Native 层函数的参数与返回值，便于验证自己的想法，但实际上手可能还会遇到不少坑点令人苦恼：&lt;/p>
&lt;ul>
&lt;li>Java/Native 层数据结构映射到 JS 这种动态语言，可能需要 cast 或者自己转换成 JS 中的类型&lt;/li>
&lt;li>Native 层通过 &lt;code>findExportByName&lt;/code> 获取函数不够准确，可能还要通过地址&lt;/li>
&lt;li>不应发生的 cannot access address &amp;hellip; 问题&lt;/li>
&lt;/ul>
&lt;p>&lt;a href="https://www.anquanke.com/post/id/195869">https://www.anquanke.com/post/id/195869&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://kevinspider.github.io/fridahookjava/">https://kevinspider.github.io/fridahookjava/&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://kevinspider.github.io/fridahookso/">https://kevinspider.github.io/fridahookso/&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://kevinspider.github.io/zhuabao/">https://kevinspider.github.io/zhuabao/&lt;/a>&lt;/p>
&lt;pre>&lt;code class="language-javascript">function map2obj(map) {
var res = {};
var keyset = map.keySet();
var it = keyset.iterator();
while (it.hasNext()) {
var keystr = it.next().toString();
var valuestr = map.get(keystr).toString();
res[keystr] = valuestr
}
return res;
}
function dfs(self, depth) {
if (depth &amp;gt; 6) return {}
const obj = {}
const cls = self.getClass()
const fields = cls.getDeclaredFields()
// console.log(&amp;quot;-&amp;quot;.repeat(depth), &amp;quot;dfs&amp;quot;, cls, self)
// console.log(&amp;quot;-&amp;quot;.repeat(depth), &amp;quot;fields:&amp;quot;, fields)
const immediates = ['short', 'int', 'long', 'float', 'double', 'boolean', 'String']
fields.forEach(x =&amp;gt; {
x.setAccessible(true)
const v = x.get(self)
if (v === null) return
const s = x.toString() // public type fullname
// const type = x.getType() // class java.lang.String
// const k = x.getName() // short name
// console.warn(x, v, k, type)
if (immediates.some(type =&amp;gt; s.includes(type))) {
obj[x] = v.toString()
} else { // inner class
obj[x] = dfs(v, depth+1)
}
})
return obj
}
function hookJava() {
if (Java.available) {
Java.perform(function () {
var cls = Java.classFactory.use(&amp;quot;com.package.classname&amp;quot;);
cls.methodName.implementation = function (a1, a2, a3, a4) {
console.log('&amp;gt;'.repeat(10), &amp;quot;hookJava begin&amp;quot;)
let a2str = JSON.stringify(map2obj(a2), null, 4)
console.log(a1, a3, a4)
console.warn(a2str)
var res = this.methodName(a1, a2, a3, a4)
console.warn('res:', res)
return res
console.log(&amp;quot;hookJava end&amp;quot;, '&amp;lt;'.repeat(10))
}
})
}
}
function hookNative() {
let m = Process.findModuleByName('lib.so')
let f = Module.findExportByName('lib.so', 'Functions_xx')
console.log(m.base, f)
// f = m.base.add(0xBDB8C)
Interceptor.attach(f, {
onEnter: function (args) {
console.warn(&amp;quot;args:&amp;quot;, args[1], args[1].readCString())
},
onLeave: function (ret) {
console.warn(&amp;quot;ret:&amp;quot;, ret, ret.readCString())
// this.context.r0 = 1
}
})
}
setImmediate(hookJava)
// setImmediate(hookNative)
&lt;/code>&lt;/pre></description></item><item><title>FART</title><link>https://chinggg.github.io/post/fart/</link><pubDate>Fri, 05 Nov 2021 23:04:43 +0800</pubDate><guid>https://chinggg.github.io/post/fart/</guid><description>安卓脱壳 FART 速成 环境准备 Pixel 3a XL 一台，代号 bonito，先恢复出厂系统 ，再准备相应源码， android-9.0.0_r47 对应 版本号 PQ3B.190801.002 对应，android-10.0.0_r2 对</description></item></channel></rss>